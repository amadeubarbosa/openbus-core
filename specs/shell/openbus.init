#! /bin/ksh
### BEGIN INIT INFO
# Provides:          openbus
# Required-Start:    $local_fs $remote_fs
# Required-Stop:     $local_fs $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      S 0 1 6
# Short-Description: OpenBus initscript
# Description:       Manage the lifecycle of the OpenBus Middleware Services.
### END INIT INFO

# Author: Amadeu A. Barbosa Jr <amadeu@tecgraf.puc-rio.br>
# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/usr/sbin:/usr/bin:/sbin:/bin
# === CHANGE HERE !!! == Please provide your path to openbus installation
OPENBUS_HOME=${OPENBUS_HOME:=/local/openbus/running}
OPENBUS_DATADIR=${OPENBUS_DATADIR:=$OPENBUS_HOME/data}
export OPENBUS_HOME
export OPENBUS_DATADIR

DESC="OpenBus Middleware Services"
NAME=openbus
SCRIPT_DIR=$OPENBUS_HOME/bin
SCRIPT_ACS=./run_access_control_server.sh
SCRIPT_RGS=./run_registry_server.sh
SCRIPT_SS=./run_session_server.sh
LOG_DIR=$OPENBUS_DATADIR/log
LOG_ACS=$LOG_DIR/acs.log
LOG_RGS=$LOG_DIR/rgs.log
LOG_SS=$LOG_DIR/ss.log
PID_ACS=$OPENBUS_DATADIR/acs.pid
PID_RGS=$OPENBUS_DATADIR/rgs.pid
PID_SS=$OPENBUS_DATADIR/ss.pid

# Exit if the package is not installed
if [ -z "$OPENBUS_HOME" ]; then
  echo "ERROR: OPENBUS_HOME variable not defined! Aborting."
  exit 2
fi
if [ ! -x "$SCRIPT_DIR/$SCRIPT_ACS" ]; then
  echo "ERROR: $SCRIPT_DIR/$SCRIPT_ACS is not executable! Aborting."
  exit 2
fi
if [ ! -x "$SCRIPT_DIR/$SCRIPT_RGS" ]; then
  echo "ERROR: $SCRIPT_DIR/$SCRIPT_RGS is not executable! Aborting."
  exit 2
fi
if [ ! -x "$SCRIPT_DIR/$SCRIPT_SS" ]; then
  echo "ERROR: $SCRIPT_DIR/$SCRIPT_SS is not executable! Aborting."
  exit 2
fi

if [ ! -d "$LOG_DIR" ]; then
  mkdir $LOG_DIR
fi

# Read configuration variable file if it is present
#[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
[ -f /etc/default/rcS ] && . /etc/default/rcS

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.0-6) to ensure that this file is present.
#. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started

  check_pid
  ret=$?
  if [ "$ret" -ne 0 ]; then
    echo " [FAILED] Try to execute 'openbus.init stop'"
    return 2
  fi

  # Launchs AccessControlServer
  echo "Starting $DESC : AccessControlServer "
  cd $SCRIPT_DIR 2>/dev/null
  echo "============= accesscontrolserver starting: `date` at: `pwd` ===============" >> $LOG_ACS
  $SCRIPT_ACS >> $LOG_ACS 2>&1 &
  pid=$!
  sleep 5
  # Checks if any signal can be sent (process exists)
  kill -0 $pid 2>/dev/null
  ret=$?
  if [ "$ret" == 0 ]; then
    echo "[ OK ]"
    echo "$pid" > $PID_ACS
  else
    echo "[ FAILED ]"
    echo "=========== AccessControlService Log ==========="
    tail -25 $LOG_ACS
    cd - >/dev/null
    do_stop > /dev/null
    return 2
  fi

  # Launchs RegistryServer
  echo "Starting $DESC : RegistryServer "
  echo "============= registryserver starting: `date` at: `pwd` ===============" >> $LOG_RGS
  $SCRIPT_RGS >> $LOG_RGS 2>&1 &
  pid=$!
  sleep 5
  # Checks if any signal can be sent (process exists)
  kill -0 $pid 2>/dev/null
  ret=$?
  if [ "$ret" == 0 ]; then
    echo "[ OK ]"
    echo "$pid" > $PID_RGS
  else
    echo "[ FAILED ]"
    echo "=========== RegistryService Log ==========="
    tail -25 $LOG_RGS
    cd - >/dev/null
    do_stop > /dev/null
    return 2
  fi

  # Launchs SessionServer
  echo "Starting $DESC : SessionServer"
  echo "============= Sessionserver starting: `date` at: `pwd` ===============" >> $LOG_SS
  $SCRIPT_SS >> $LOG_SS 2>&1 &
  pid=$!
  sleep 5
  # Checks if any signal can be sent (process exists)
  kill -0 $pid 2>/dev/null
  ret=$?
  if [ "$ret" == 0 ]; then
    echo "[ OK ]"
    echo "$pid" > $PID_SS
  else
    echo "[ FAILED ]"
    echo "=========== SessionSrvice Log ==========="
    tail -25 $LOG_SS
    cd - >/dev/null
    do_stop > /dev/null
    return 2
  fi
  cd - >/dev/null
  return 0
}

#
# Check persistent pids
#
check_pid()
{
  # Check PID_ACS
  pid=$(cat $PID_ACS 2>/dev/null)
  if [ -n "$pid" ]; then
    kill -0 $pid 2>/dev/null
    if [ "$?" == 0 ]; then
      echo " [ERROR] AccessControlService already started up ( PID = '$pid')"
      return 1
    fi
  fi


  # Check PID_RS
  pid=$(cat $PID_RGS 2>/dev/null)
  if [ -n "$pid" ]; then
    kill -0 $pid 2>/dev/null
    if [ "$?" == 0 ]; then
      echo " [ERROR] RegistryService already started up ( PID = '$pid')"
      return 1
    fi
  fi

  # Check PID_ACS
  pid=$(cat $PID_SS 2>/dev/null)
  if [ -n "$pid" ]; then
    kill -0 $pid 2>/dev/null
    if [ "$?" == 0 ]; then
      echo " [ERROR] SessionService already started up ( PID = '$pid')"
      return 1
    fi
  fi

  return 0
}

#
# Function that shows if running or not
#
do_status()
{
  acspid=$(cat $PID_ACS 2>/dev/null)
  rgspid=$(cat $PID_RGS 2>/dev/null)
  sspid=$(cat $PID_SS 2>/dev/null)

  if [ -n "$acspid" ] && [ -n "$rgspid" ] && [ -n "$sspid" ]; then
    kill -0 $acspid 2>/dev/null
    running=$?
    if [ "$running" == 0 ]; then
      echo " [INFO] AccessControlService is running (PID = $acspid)" 
    else
      echo " [ERROR] AccessControlService is NOT running !!"
    fi
    kill -0 $rgspid 2>/dev/null
    running=$?
    if [ "$running" == 0 ]; then
      echo " [INFO] RegistryService is running (PID = $rgspid)" 
    else
      echo " [ERROR] RegistryService is NOT running !!"
    fi
    kill -0 $sspid 2>/dev/null
    running=$?
    if [ "$running" == 0 ]; then
      echo " [INFO] SessionService is running (PID = $sspid)" 
    else
      echo " [ERROR] SessionSrvice is NOT running !!"
    fi
  else
    echo $DESC is NOT running
  fi 
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred

  echo "Stopping $DESC : SessionServer"
  pid=$(cat $PID_SS 2>/dev/null)
  kill_proccess $pid

  echo "Stopping $DESC : RegistryServer "
  pid=$(cat $PID_RGS 2>/dev/null)
  kill_proccess $pid

  echo "Stopping $DESC : AccessControlServer "
  pid=$(cat $PID_ACS 2>/dev/null)
  kill_proccess $pid

  rm -f $PID_ACS $PID_RGS $PID_SS
  return 0
}

#
# Function that kill the proccess
#
kill_proccess()
{
  # Return
  #   0 if daemon has been stopped
  #   other if a failure occurred

  process=$1
  if [ -n "$process" ]; then
    kill -15 $process || kill -9 $process
    ret=$?
    if [ "$ret" == 0 ]; then
      echo " [ OK ]"
      return 0
    fi
  fi

  echo " [INFO] Already stopped "
  return 1
}


case "$1" in
  start)
  do_start
  case "$?" in
    0|1) exit 0 ;;
    2) exit 1 ;;
  esac
  ;;
  status)
  do_status
  case "$?" in
    0|1) exit 0 ;;
    2) exit 1 ;;
  esac
  ;;
  stop)
  do_stop
  case "$?" in
    0|1) exit 0 ;;
    2) exit 1 ;;
  esac
  ;;
  restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
  echo "Restarting $DESC"
  do_stop
  case "$?" in
    0|1)
    do_start
    case "$?" in
      0) exit 0 ;;
      *) exit 1 ;; # Failed to start
    esac
    ;;
    *)
      # Failed to stop
    exit 1
    ;;
  esac
  ;;
  *)
  echo "Usage: $0 {start|stop|restart|status|force-reload}"
  exit 3
  ;;
esac

:
