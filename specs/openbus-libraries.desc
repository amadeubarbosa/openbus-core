-- Description of tecmake oriented software, typical tecgraf programs that need
-- tecmake and tecgraf variables to be compiled. Some dummy packages could
-- also use it, like packages that just need to copy files and make links.
-- ATTENTION: place the fundamental packages first!
-- If A depends on B then you should place B's description before than A's.
SUNOS64_TECMAKE_FLAGS="USE_NODEPEND=Yes TEC_UNAME=SunOS510_64 BUILD_64=yes"
packages = {
  -- fake package to easy the download of the oil05, scs and friend projects
  { name = "oil-source",
    url = SVNREPURL .. "/openbus/libs/trunk/oil-0.5-beta-obv",
    directory = PRODAPP .."/oil-0.5-beta-obv", 
  },
  { name = "scs-source",
    url = SVNREPURL .. "/scs/trunk",
    directory = PRODAPP .."/scs",
  },
  { name = "idl-source",
    url = SVNREPURL .. "/openbus/idl/trunk",
    directory = PRODAPP .."/idl",
  },
  { name = "idl-1.4-source",
    url = SVNREPURL .. "/openbus/branches/OB_v1_04_2009_08_07/core/idl",
    directory = PRODAPP .."/idl-1.4",
  },
  { name = "sdk-java-source",
    url = SVNREPURL .. "/openbus/sdk/java/trunk",
    directory = PRODAPP .."/sdk-java",
  },
  { name = "sdk-lua-source",
    url = SVNREPURL .. "/openbus/sdk/lua/trunk",
    directory = PRODAPP .."/sdk-lua",
  },
  { name = "sdk-cpp-source",
    url = SVNREPURL .. "/openbus/sdk/cpp/trunk",
    directory = PRODAPP .."/sdk-cpp",
  },
  { name = "openbus-source",
    url = SVNREPURL .. "/openbus/trunk",
    directory = SVNDIR, -- main source directory for PUts!
                        -- other sources have to be in PRODAPP/something
  },
  { name = "licenses",
    install_files = {
    [SVNDIR.."/LICENSE"] = ".",
    [SVNDIR.."/README"]  = ".",
    },
  },
  { name = "auxiliar-files",
    install_files = {
      [SVNDIR.."/tools/shell/openssl-generate.ksh"] = "./bin",
    },
  },
  { name = "lua5.1",
    url = SVNREPURL .. "/openbus/libs/trunk/lua5.1.3",
    build = {
      type = "tecmake",
      src = PRODAPP .."/lua5.1/src",
      mf = { "config" },
      Darwin = { mf = {"config", "config BUILD_DYLIB=Yes"} },
      SunOS510 = { mf = {'config USE_NODEPEND=Yes CFLAGS=-KPIC LD=CC AR=CC STDLFLAGS+=-xar STDLFLAGS+=-o '} },
      SunOS510_64 = { mf = {'config USE_NODEPEND=Yes CFLAGS=-KPIC CFLAGS+=-m64 LD=CC LFLAGS=-m64 AR=CC LFLAGS=-m64 STDLFLAGS=-m64 STDLFLAGS+=-xar STDLFLAGS+=-o '} },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblua5.1.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/liblua5.1.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liblua5.1.*"] = "libpath/${TEC_UNAME}",
      ["../include/*"] = "incpath/lua5.1.3",
    },
  },
  { name = "lua5.1-bin",
    build = {
      type = "tecmake",
      src = PRODAPP .."/lua5.1/src",
      mf = { "lua", --[["luac", "bin2c",]] },
      SunOS510_64 = { mf = {"lua ".. SUNOS64_TECMAKE_FLAGS} },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/lua5.1"] = "bin/${TEC_UNAME}",
    },
  },
  { name = "tolua5.1",
    url = SVNREPURL .. "/openbus/libs/trunk/tolua5.1",
    build = {
      type = "tecmake",
      src = PRODAPP .."/tolua5.1/src",
      mf = { "tolua5lib LUA51=../../lua5.1", "tolua5 LUA51=../../lua5.1" },
    Darwin = { mf = {"tolua5lib LUA51="..PRODAPP.."/lua5.1", "tolua5lib BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1", "tolua5 LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "tolua5lib LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS, "tolua5 LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    dev_files = {
      ["../bin/${TEC_UNAME}/tolua5.1"] = "bin/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/libtolua5.1.*"] = "libpath/${TEC_UNAME}",
      ["../include/tolua.h"] = "incpath/tolua5.1",
    },
  },
  { name = "luafilesystem",
    url = SVNREPURL .. "/openbus/libs/trunk/luafilesystem-1.4.2/",
    build = {
      type = "tecmake",
      src = PRODAPP .."/luafilesystem/src",
      mf = { "config LUA51=../../lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblfs.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/liblfs.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liblfs.*"] = "libpath/${TEC_UNAME}",
      ["../include/*"] = "incpath/luafilesystem",
    },
  },
  { name = "luasocket2",
    url = SVNREPURL .. "/openbus/libs/trunk/luasocket2",
    build = {
      type = "tecmake",
      src = PRODAPP .."/luasocket2/src",
      mf = { "config LUA51=../../lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libluasocket.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/libluasocket.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libluasocket.*"] = "libpath/${TEC_UNAME}",
      ["luasocket.h"] = "incpath/luasocket2",
    },
  },
  { name = "oilall",
    build = {
      type = "tecmake",
      src = PRODAPP .."/oil-0.5-beta-obv/src",
      mf = { "oilall LUA51=../../lua5.1", },
    Darwin = { mf = {"oilall LUA51="..PRODAPP.."/lua5.1", "oilall BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "oilall LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liboilall.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/liboilall.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liboilall.*"] = "libpath/${TEC_UNAME}",
      ["oilall.h"] = "incpath/oil-0.5-beta-obv",
    },
  },
  { name = "luuid",
    url = SVNREPURL .. "/openbus/libs/trunk/luuid",
    build = {
      type = "tecmake",
      src = PRODAPP .."/luuid/src",
      mf = { "config LUA51=../../lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libluuid.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/libluuid.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libluuid.*"] = "libpath/${TEC_UNAME}",
      ["../include/*"] = "incpath/luuid",
    },
  },
  { name = "lualdap-1.0.1",
    url = SVNREPURL .. "/openbus/libs/trunk/lualdap-1.0.1",
    build = {
      type = "tecmake",
      src = PRODAPP .."/lualdap-1.0.1/src",
      mf = { "config LUA51=../../lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblualdap.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/liblualdap.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liblualdap.*"] = "libpath/${TEC_UNAME}",
      ["../include/*"] = "incpath/lualdap-1.0.1",
    },
  },
  { name = "latt-1.0.0",
    url = SVNREPURL .. "/openbus/libs/trunk/latt-1.0.0",
    build = {
      type = "tecmake",
      src = PRODAPP .."/latt-1.0.0",
      mf = { },
    },
    dev_files = {
      ["lua/*"] = "libpath/lua/5.1"
    },
  },
  -- TIP: precompiler.lua precisa do loop!
  { name = "loop",
    build = {
      type = "tecmake",
      src = PRODAPP .."/oil-0.5-beta-obv",
      mf = { },
    },
    dev_files = {
      ["lua/loop"] = "libpath/lua/5.1", 
      ["lua/precompiler.lua"] = "libpath/lua/5.1",
      ["lua/preloader.lua"] = "libpath/lua/5.1",
    },
  },
  { name = "scsall",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs/src/cpp/cppoil",
      mf = { "scsall LOOP_HOME="..INSTALL.TOP.."/libpath/lua/5.1 LUA51="..PRODAPP.."/lua5.1", },
    Darwin = { mf = {"scsall LOOP_HOME="..INSTALL.TOP.."/libpath/lua/5.1 LUA51="..PRODAPP.."/lua5.1", "scsall LOOP_HOME="..INSTALL.TOP.."/libpath/lua/5.1 LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes"} },
      SunOS510_64 = { mf = { "scsall LOOP_HOME="..INSTALL.TOP.."/libpath/lua/5.1 LUA51="..PRODAPP.."/lua5.1 "..SUNOS64_TECMAKE_FLAGS, } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libscsall.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/libscsall.dylib"] = "libpath/${TEC_UNAME}",
      ["../../../idl/scs.idl"] = "idlpath/v1_04",
      [INSTALL.TOP.."/idlpath/v1_04/scs.idl"] = "idlpath/v1_05",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libscsall.*"] = "libpath/${TEC_UNAME}",
      ["../../../idl/scs.idl"] = "idlpath/v1_04",
      [INSTALL.TOP.."/idlpath/v1_04/scs.idl"] = "idlpath/v1_05",
      ["../obj/${TEC_UNAME}/scsall.h"] = "incpath/scs",
    },
  },
  { name = "scsoil",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs/src/cpp/cppoil",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", },
      Darwin = { mf = { 
        "config LUA51="..PRODAPP.."/lua5.1", 
        "config LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes"}, },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libscsoil.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/libscsoil.dylib"] = "libpath/${TEC_UNAME}",
      ["../../../idl/scs.idl"] = "idlpath/v1_04",
      [INSTALL.TOP.."/idlpath/v1_04/scs.idl"] = "idlpath/v1_05",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libscsoil.*"] = "libpath/${TEC_UNAME}",
      ["../../../idl/scs.idl"] = "idlpath/v1_04",
      [INSTALL.TOP.."/idlpath/v1_04/scs.idl"] = "idlpath/v1_05",
      ["*.h"] = "incpath/scs/cppoil/",
      ["luaidl/*.h"] = "incpath/scs/cppoil/luaidl/",
    },
  },
  { name = "ftc",
    url = SVNREPURL .. "/ftc/tags/FTC_v1_01_00_2010_06_19",
    build = {
      type = "tecmake",
      src = PRODAPP .."/ftc/cpp/src",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", "without_oil LUA51="..PRODAPP.."/lua5.1", },
      Darwin = { mf = { 
        "config LUA51="..PRODAPP.."/lua5.1", 
        "config LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes", 
        "without_oil LUA51="..PRODAPP.."/lua5.1",
        "without_oil LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes", 
        }, 
      },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS, "without_oil LUA51="..PRODAPP.."/lua5.1 "..SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libftc*.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/libftc*.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["*.h"] = "incpath/ftc/",
      ["../lib/${TEC_UNAME}/libftc.*"] = "libpath/${TEC_UNAME}",
    },
  },
  { name = "ftc-java",
    build = {
    type = "maven",
    src = PRODAPP .."/ftc/java",
    },
    install_files = {
    ["target/ftc-*.jar"] = "libpath/java",
    },
  },
  { name = "luatrace",
    url = SVNREPURL .. "/openbus/libs/trunk/luatrace",
    build = {
      type = "command",
      src = PRODAPP .."/luatrace",
      Linux = { cmd = "make PLAT=linux reader static-writer dynamic-writer "..
         "&& make PLAT=linux INSTALL_TOP=" .. TMPDIR  .. 
         " install-reader install-static-writer install-dynamic-writer", 
      },
    },
    install_files = {
        [TMPDIR .. "/bin/luatrace"]                       = "bin/${TEC_UNAME}", 
        [TMPDIR .. "/lib/libluatrace_*.so"]               = "libpath/${TEC_UNAME}", 
        [TMPDIR .. "/lib/lua/5.1/trace/*.so"]             = "libpath/${TEC_UNAME}/trace",
        [TMPDIR .. "/lib/lua/5.1/trace/inputstream/*.so"] = "libpath/${TEC_UNAME}/trace/inputstream", 
        [TMPDIR .. "/lib/lua/5.1/trace/msgdecoder/*.so"]  = "libpath/${TEC_UNAME}/trace/msgdecoder", 
        [TMPDIR .. "/lib/lua/5.1/trace/msgreader/*.so"]   = "libpath/${TEC_UNAME}/trace/msgreader", 
        [TMPDIR .. "/share/lua/5.1/trace/manager.lua"]    = "libpath/lua/5.1/trace", 
    },
  },
  { name = "lce",
    build = {
      type = "tecmake",
      src = SVNDIR .."/lib/lce/src",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblce*.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/liblce*.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["../include/*"] = "incpath/lce/",
      ["../lib/${TEC_UNAME}/liblce.*"] = "libpath/${TEC_UNAME}",
    },
  },
  { name = "lpw",
    build = {
      type = "tecmake",
      src = SVNDIR .."/lib/lpw/src",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblpw.so"] = "libpath/${TEC_UNAME}",
      ["../lib/${TEC_UNAME}/liblpw.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["lpw.h"] = "incpath/lpw/",
      ["../lib/${TEC_UNAME}/liblpw.*"] = "libpath/${TEC_UNAME}",
    },
  },
  { name = "openbus-lua",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-lua",
      mf = { "config LUA51="..PRODAPP.."/lua5.1" },
      Darwin = { mf = { "config LUA51="..PRODAPP.."/lua5.1","config LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=YES" }, },
    },
    install_files = {
      ["lib/${TEC_UNAME}/libluaopenbus.so"] = "libpath/${TEC_UNAME}",
      ["lib/${TEC_UNAME}/libluaopenbus.dylib"] = "libpath/${TEC_UNAME}",
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libluaopenbus.*"] = "libpath/${TEC_UNAME}",
      ["obj/${TEC_UNAME}/openbus.h"] = "incpath/openbus/lua/",
    },
  },
  { name = "openbus-core",
    build = {
      type = "tecmake",
      src = SVNDIR .."/core/services",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
      --env LFLAGS="-undefined dynamic_lookup"
    },
    install_files = {
      ["../bin/${TEC_UNAME}/servicelauncher"] = "core/bin/${TEC_UNAME}",
      ["../bin/*.sh"] = "core/bin",
      ["../bin/servicelauncher"] = "core/bin",
      [PRODAPP.."/idl-1.4/*.idl"] = "idlpath/v1_04",
      [PRODAPP.."/idl/src/*.idl"] = "idlpath/v1_05",
      ["../services/accesscontrol"] = "core/services",
      ["../services/registry"] = "core/services",
      ["../services/faulttolerance"] = "core/services",
      ["../services/session"] = "core/services",
      ["../management/*"] = "core/management",
      ["../test/lua/run_check_install.sh"] = "core/test",
      ["../test/lua/checkInstall.lua"] = "core/test",
      ["../../specs/management"] = "specs",
      ["../../specs/shell"] = "specs",
      ["../../specs/templates"] = "specs",
    },
    conf_files = {
      ["../../data/conf"] = "data",
    },
    -- TODO: include here all templates/openbus.lua messages table!!
    conf_template = {
      SVNDIR .."/specs/templates/openbus.lua",
    },
    dev_files = {
      ["../test/lua"] = "core/test",
    },
  },
  { name = "openbus-bin-acs",
    build = {
      type = "tecmake",
      src = SVNDIR .."/core/services",
      mf = { "accesscontrol LUA51="..PRODAPP.."/lua5.1", },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/acs"] = "core/bin/${TEC_UNAME}",
      ["../bin/run_binary_acs.sh"] = "core/bin",
    },
  },
  { name = "openbus-bin-rgs",
    build = {
      type = "tecmake",
      src = SVNDIR .."/core/services",
      mf = { "registry LUA51="..PRODAPP.."/lua5.1", },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/rgs"] = "core/bin/${TEC_UNAME}",
      ["../bin/run_binary_rgs.sh"] = "core/bin",
    },
  },
  { name = "openbus-bin-ss",
    build = {
      type = "tecmake",
      src = SVNDIR .."/core/services",
      mf = { "session LUA51="..PRODAPP.."/lua5.1", },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/ss"] = "core/bin/${TEC_UNAME}",
      ["../bin/run_binary_ss.sh"] = "core/bin",
    },
  },
  { name = "openbus-demo-hello-lua",
    directory = PRODAPP .."/sdk-lua/demo/hello",
    dev_files = {
      ["client.lua"] = "demo/hello/lua",
      ["server.lua"] = "demo/hello/lua",
      ["run"] = "demo/hello/lua",
      ["Hello.properties"] = "demo/hello/lua",
      ["idl"] = "demo/hello",
      ["management"] = "demo/hello",
    },
  },
  { name = "openbus-demo-eventsink-lua",
    directory = PRODAPP .."/sdk-lua/demo/eventSink",
    dev_files = {
      ["client.lua"] = "demo/eventSink/lua",
      ["client.sh"] = "demo/eventSink/lua",
      ["server.lua"] = "demo/eventSink/lua",
      ["server.sh"] = "demo/eventSink/lua",
      ["EventSink.properties"] = "demo/eventSink/lua",
      ["management"] = "demo/eventSink",
    },
  },
  { name = "openbus-demo-delegate-lua",
    directory = PRODAPP .."/sdk-lua/demo/delegate",
    dev_files = {
      ["client.lua"] = "demo/delegate/lua",
      ["server.lua"] = "demo/delegate/lua",
      ["run"] = "demo/delegate/lua",
      ["Delegate.properties"] = "demo/delegate/lua",
      ["idl"] = "demo/delegate",
      ["management"] = "demo/delegate",
    },
  },
   -- Orbix related packages
  { name = "scsorbix",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs/src/cpp",
      mf = { 
        "orbix genstubs", 
        "orbix" 
      },
      -- special compile instructions for solaris
      SunOS = {
        mf = { 
          "orbix genstubs", 
          "orbix", 
          "orbix sunosShared" 
        },
      },
      SunOS510_64 = {
        mf = { 
          "orbix genstubs ".. SUNOS64_TECMAKE_FLAGS, 
          "orbix "..SUNOS64_TECMAKE_FLAGS, 
          "orbix sunosShared "..SUNOS64_TECMAKE_FLAGS 
        },
      },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libscsorbix.so"] = "libpath/${TEC_UNAME}",
      ["../../idl/scs.idl"] = "idlpath/v1_05",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libscsorbix.*"] = "libpath/${TEC_UNAME}",
      ["../../idl/scs.idl"] = "idlpath/v1_05",
      ["*.h"] = "incpath/scs/",
    },
  },
  { name = "openbus-orbix",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp",
      mf = { 
        "orbix genstubs", 
        "orbix precompile", 
        "orbix LUA51="..PRODAPP.."/lua5.1" 
      },
      -- special compile instructions for solaris
      SunOS = {
        mf = { 
          "orbix genstubs", 
          "orbix precompile", 
          "orbix LUA51="..PRODAPP.."/lua5.1", 
          "orbix sunosShared" 
        },
      },
      SunOS510_64 = {
        mf = { 
          "orbix genstubs ".. SUNOS64_TECMAKE_FLAGS, 
          "orbix precompile", 
          "orbix LUA51="..PRODAPP.."/lua5.1 "..SUNOS64_TECMAKE_FLAGS, 
          "orbix sunosShared "..SUNOS64_TECMAKE_FLAGS 
        },
      },
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libopenbusorbix.*"] = "libpath/${TEC_UNAME}",
      ["*.h"] = "incpath/openbus/cpp", --include
      ["openbus/util/*.h"] = "incpath/openbus/cpp/openbus/util/",    --include
      ["openbus/interceptors/*.h"] = "incpath/openbus/cpp/openbus/interceptors/",    --include
      ["stubs/orbix"] = "incpath/openbus/cpp/stubs",     --include
      [INSTALL.TOP.."/idlpath/v1_05/*"] = "idlpath/v1_05",
      ["test/orbix/acs/*.cpp"] = "test/orbix/acs/",
      ["test/orbix/acs/config.mak"] = "test/orbix/acs/",
      ["test/orbix/rgs/*.cpp"] = "test/orbix/rgs/",
      ["test/orbix/rgs/config.mak"] = "test/orbix/rgs/",
      ["test/orbix/config*"] = "test/orbix/",
      ["test/orbix/runtests"] = "test/orbix/",
    },
  },  
  { name = "openbus-orbix-test",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/test/orbix",
      mf = { 
        "config cxxtest -C acs", 
        "config -C acs LUA51="..PRODAPP.."/lua5.1", 
        "config cxxtest -C rgs",  
        "config genstubs -C rgs", 
        "config -C rgs LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510_64 = { 
  	    mf = { 
  	      "config cxxtest -C acs",
          "config -C acs LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS,
          "config cxxtest -C rgs",
          "config genstubs -C rgs",
          "config -C rgs LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS, 
        },
      },
    },
    install_files = {
      ["bin/${TEC_UNAME}/*"] = "test/orbix/bin/${TEC_UNAME}",
      ["config*"] = "test/orbix/",
      ["runtests"] = "test/orbix/",
    },
  },
  { name = "openbus-orbix-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/sdk-cpp",
      cmd = "doxygen",
      arguments = "doxygen.cfg"
    },
    install_files = {
      ["docs/html"] = "docs/cpp/",
    },
  },
  { name = "openbus-demo-hello-orbix",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/hello/orbix",
      mf = { 
        "server genstubs USE_NODEPEND=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1", 
        "server LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510_64 = { 
        mf = { 
          "server genstubs ".. SUNOS64_TECMAKE_FLAGS, 
          "client LUA51="..PRODAPP.."/lua5.1 "..SUNOS64_TECMAKE_FLAGS, 
          "server LUA51="..PRODAPP.."/lua5.1 "..SUNOS64_TECMAKE_FLAGS 
        }, 
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/hello/orbix/bin/${TEC_UNAME}",
      ["../idl/hello.idl"] = "demo/hello/idl/",
      ["../management"] = "demo/hello",
      ["client.cpp"] = "demo/hello/orbix",
      ["server.cpp"] = "demo/hello/orbix",
      ["run*"] = "demo/hello/orbix",
      ["*.mak"] = "demo/hello/orbix",
      ["*config"] = "demo/hello/orbix",
      ["run*"] = "demo/hello/orbix",
      ["client"] = "demo/hello/orbix",
      ["server"] = "demo/hello/orbix",
      [SVNDIR.."/specs/shell/*rc"] = "specs/shell/", -- shell variables
      [SVNDIR.."/specs/shell/sample-domain_env.*"] = "specs/shell/",
    },
  },
  { name = "openbus-demo-delegate-orbix",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/delegate/singlethread/orbix",
      mf = { 
        "server genstubs", 
        "client LUA51="..PRODAPP.."/lua5.1",
        "server LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510_64 = { 
        mf = { 
          "server genstubs ".. SUNOS64_TECMAKE_FLAGS, 
          "client LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS, 
          "server LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS 
        }, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/delegate/singlethread/orbix/bin/${TEC_UNAME}",
      ["../../idl/delegate.idl"] = "demo/delegate/singlethread/idl/",
      ["../../management"] = "demo/delegate/singlethread",
      ["client.cpp"] = "demo/delegate/singlethread/orbix",
      ["server.cpp"] = "demo/delegate/singlethread/orbix",
      ["run*"] = "demo/delegate/singlethread/orbix",
      ["*.mak"] = "demo/delegate/singlethread/orbix",
      ["*config"] = "demo/delegate/singlethread/orbix",
      ["run*"] = "demo/delegate/singlethread/orbix",
      ["client"] = "demo/delegate/singlethread/orbix",
      ["server"] = "demo/delegate/singlethread/orbix",
      [SVNDIR.."/specs/shell/*rc"] = "specs/shell/", -- shell variables
      [SVNDIR.."/specs/shell/sample-domain_env.*"] = "specs/shell/",
    },
  },
  -- MICO related packages
  { name = "scsmico",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs/src/cpp",
      mf = { 
        "mico genstubs", 
        "mico LUA51="..PRODAPP.."/lua5.1" 
      },
      Darwin104x86 = {
        mf = { 
          "mico genstubs LD=g++", 
          "mico LD=g++ LUA51="..PRODAPP.."/lua5.1" 
        },
      },
      SunOS510 = { 
        mf = { 
          "mico genstubs ",
          "mico LD=CC LUA51="..PRODAPP.."/lua5.1 ",
        },
      },
      SunOS510_64 = { 
        mf = { 
          "mico genstubs ",
          'mico "LD=CC TEC_UNAME=SunOS510_64" LUA51='..PRODAPP.."/lua5.1 ",
        },
      },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libscsmico.so"] = "libpath/${TEC_UNAME}",
      ["../../idl/scs.idl"] = "idlpath/v1_05",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libscsmico.*"] = "libpath/${TEC_UNAME}",
      ["../../idl/scs.idl"] = "idlpath/v1_05",
      ["*.h"] = "incpath/scs",
    },
  },
  { name = "openbus-mico",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp",
      mf = { 
        "mico genstubs", 
        "mico LUA51="..PRODAPP.."/lua5.1" },
      -- special compile instructions for solaris
      Darwin104x86 = {
        mf = { 
          "mico genstubs LD=g++", 
          "mico LD=g++ LUA51="..PRODAPP.."/lua5.1" 
        },
      },
      SunOS510 = {
        mf = { 
          "mico genstubs", 
          "mico LD=CC LUA51="..PRODAPP.."/lua5.1", 
        },
      },
      SunOS510_64 = {
        mf = { 
          "mico genstubs", 
          'mico "TEC_UNAME=SunOS510_64 LD=CC" LUA51='..PRODAPP.."/lua5.1", 
        },
      },
    },
    dev_files = {
      ["./CHANGES"] = ".",
      ["specs/shell/mico*"] = "specs/shell/",
      ["lib/${TEC_UNAME}/libopenbusmico.*"] = "libpath/${TEC_UNAME}",
      ["*.h"] = "incpath/openbus/cpp", --include
      ["openbus/util/*.h"] = "incpath/openbus/cpp/openbus/util/",    --include
      ["openbus/interceptors/*.h"] = "incpath/openbus/cpp/openbus/interceptors/",    --include
      ["stubs/mico"] = "incpath/openbus/cpp/stubs",     --include
      [INSTALL.TOP.."/idlpath/v1_05/*"] = "idlpath/v1_05",
      ["test/mico/acs/*.cpp"] = "test/mico/acs/",
      ["test/mico/acs/config.mak"] = "test/mico/acs/",
      ["test/mico/rgs/*.cpp"] = "test/mico/rgs/",
      ["test/mico/rgs/config.mak"] = "test/mico/rgs/",
      ["test/mico/config*"] = "test/mico/",
      ["test/mico/runtests"] = "test/mico/",
    },
  },
  { name = "openbus-demo-hello-mico",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/hello/mico",
      mf = { 
        "server genstubs", 
        "client LUA51="..PRODAPP.."/lua5.1",
        "server LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510 = { 
        mf = { 
          "server genstubs ",
          'client "LUA51='..PRODAPP..'/lua5.1 "',
          'server "LUA51='..PRODAPP..'/lua5.1 "',
        }, 
      },
      SunOS510_64 = { 
        mf = { 
          "server genstubs ",
          'client "TEC_UNAME=SunOS510_64 LUA51='..PRODAPP..'/lua5.1 "',
          'server "TEC_UNAME=SunOS510_64 LUA51='..PRODAPP..'/lua5.1 "',
        }, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/hello/mico/bin/${TEC_UNAME}",
      ["../idl/hello.idl"] = "demo/hello/idl/",
      ["../management"] = "demo/hello",
      ["client.cpp"] = "demo/hello/mico",
      ["server.cpp"] = "demo/hello/mico",
      ["run*"] = "demo/hello/mico",
      ["*.mak"] = "demo/hello/mico",
      ["*config"] = "demo/hello/mico",
      ["run*"] = "demo/hello/mico",
      ["client"] = "demo/hello/mico",
      ["server"] = "demo/hello/mico",
      [SVNDIR.."/specs/shell/*rc"] = "specs/shell/", -- shell variables
      [SVNDIR.."/specs/shell/mico-setup.*"] = "specs/shell/",
    },
  },
  { name = "openbus-demo-delegate-mico",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/delegate/singlethread/mico",
      mf = { 
        "server genstubs", 
        "client LUA51="..PRODAPP.."/lua5.1",
        "server LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510 = { 
        mf = { 
          "server genstubs ",
          'client "LUA51='..PRODAPP..'/lua5.1 "',
          'server "LUA51='..PRODAPP..'/lua5.1 "',
        }, 
      },
      SunOS510_64 = { 
        mf = { 
          "server genstubs ",
          'client "TEC_UNAME=SunOS510_64 LUA51='..PRODAPP..'/lua5.1 "',
          'server "TEC_UNAME=SunOS510_64 LUA51='..PRODAPP..'/lua5.1 "',
        }, 
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/delegate/singlethread/mico/bin/${TEC_UNAME}",
      ["../../idl/delegate.idl"] = "demo/delegate/singlethread/idl/",
      ["../../management"] = "demo/delegate/singlethread",
      ["client.cpp"] = "demo/delegate/singlethread/mico",
      ["server.cpp"] = "demo/delegate/singlethread/mico",
      ["run*"] = "demo/delegate/singlethread/mico",
      ["*.mak"] = "demo/delegate/singlethread/mico",
      ["*config"] = "demo/delegate/singlethread/mico",
      ["run*"] = "demo/delegate/singlethread/mico",
      ["client"] = "demo/delegate/singlethread/mico",
      ["server"] = "demo/delegate/singlethread/mico",
      [SVNDIR.."/specs/shell/*rc"] = "specs/shell/", -- shell variables
      [SVNDIR.."/specs/shell/mico-setup.*"] = "specs/shell/",
    },
  },
  { name = "openbus-mico-test",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/test/mico",
      mf = { 
        "config cxxtest -C acs", 
        "config -C acs LUA51="..PRODAPP.."/lua5.1", 
        "config cxxtest -C rgs", 
        "config genstubs -C rgs", 
        "config -C rgs LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510_64 = { 
	    mf = { 
	      "config cxxtest -C acs",
        "config -C acs LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS,
        "config cxxtest -C rgs",
        "config genstubs -C rgs",
        "config -C rgs LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS, },
      },
    },
    install_files = {
      ["bin/${TEC_UNAME}/*"] = "test/mico/bin/${TEC_UNAME}",
      ["config*"] = "test/mico/",
      ["runtests"] = "test/mico/",
      ["../idl/*"] = "test/idl",
    },
  },
  -- Java related packages  
  { name = "scs-java-ant",
    build = {
      type = "ant",
      src = PRODAPP .."/scs/src/java",
      target = "jar-core",
    },
  },
  { name = "scs-java",
    build = {
      type = "mavenimport",
      src = PRODAPP .. "/scs",
    },
    parameters = { 
      ["libs/scs.jar"] = { groupId="tecgraf.scs", artifactId="scs-core",
       version="1.1.0" },
      ["libs/scsidl.jar"] = { groupId="tecgraf.scs", artifactId="scs-idl-jacorb",
       version="1.1.0" },
    },
    install_files = {
      ["idl/scs.idl"]  = "idlpath/v1_04",
      [INSTALL.TOP.."/idlpath/v1_04/scs.idl"] = "idlpath/v1_05",
    },
  },
  { name = "openbusidl-java",
    build = {
      type = "maven",
      src = PRODAPP .."/idl",
    },
    install_files = {
      ["src/*.idl"] = "idlpath/v1_05",
      ["target/openbus-idl-jacorb-*.jar"] = "libpath/java",
      ["target/dependency/*.jar"] = "libpath/java",
    },
  },
  { name = "openbus-java",
    build = {
      type = "maven",
      src = PRODAPP .."/sdk-java", 
    },
  },
  { name = "openbusapi-java",
    build = {
      type = "maven",
      src = PRODAPP .."/sdk-java",      
    },
    install_files = {
      ["target/openbus-api-*.jar"] = "libpath/java",
      ["target/dependency/*.jar"] = "libpath/java",
    },
  },
  { name = "openbusapi-java-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/sdk-java",
      cmd = "mvn",
      rebuild = "clean",
      arguments = "javadoc:javadoc -Dquiet",
    },
    install_files = {
      ["target/site"] = "docs/java/",
    },
  },
  { name = "openbus-demo-hello-java",
    build = {
      type = "maven",
      src = PRODAPP .."/sdk-java/demo/hello",
    },
    install_files = {
      ["target/openbus-demo-hello-*.jar"] = "demo/hello",
      ["target/dependency/*.jar"] = "libpath/java",
    },
    dev_files = {
      ["resources"] = "demo/hello",
      ["src"] = "demo/hello",
      ["idl"] = "demo/hello",
      ["management"] = "demo/hello",
    },
  },
  { name = "openbus-demo-eventsink-java",
    build = {
      type = "maven",
      src = PRODAPP .."/sdk-java/demo/eventSink",
    },
    install_files = {
      ["target/openbus-demo-eventsink-*.jar"] = "demo/eventSink",
      ["target/dependency/*.jar"] = "libpath/java",
    },
    dev_files = {
      ["resources"] = "demo/eventSink",
      ["src"] = "demo/eventSink",
      ["idl"] = "demo/eventSink",
      ["management"] = "demo/eventSink",
    },
  },  
  { name = "openbus-demo-delegate-java",
    build = {
      type = "maven",
      src = PRODAPP .."/sdk-java/demo/delegate",
    },
    install_files = {
      ["target/openbus-demo-delegate-*.jar"] = "demo/delegate",
      ["target/dependency/*.jar"] = "libpath/java",
    },
    dev_files = {
      ["resources"] = "demo/delegate",
      ["src"] = "demo/delegate",
      ["idl"] = "demo/delegate",
      ["management"] = "demo/delegate",
    },
  },
--  { name = "ldap-Linux26g4",
--    src = "/",
--    mf = { },
--    install_files = {
--      ["/usr/lib/libldap.so.2"] = "libpath/${TEC_UNAME}/",
--    },
--    dev_files = {
--      ["/usr/include/ldap.h"] = "incpath/ldap/",
--    },
--  },
}
-- temporary hack! em breve vou renomear definitivamente a tabela packages e
-- ela vai ficar incompativel com versoes antigas do 'tools.compile'
descriptors = packages
