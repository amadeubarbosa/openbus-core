-- Description of tecmake oriented software, typical tecgraf programs that need
-- tecmake and tecgraf variables to be compiled. Some dummy packages could
-- also use it, like packages that just need to copy files and make links.
-- ATTENTION: place the fundamental packages first!
-- If A depends on B then you should place B's description before than A's.
SUNOS64_TECMAKE_FLAGS="USE_NODEPEND=Yes TEC_UNAME=SunOS510_64 BUILD_64=yes"

IDL_VERSION="v2_0"
IDL_PREV="v1_05"

-- FIXME: solucao temporaria para simplificar os descritores que eram muito semelhantes
--        talvez seja melhor incorporar no puts um plugin 'tools.build.tecmakelualib'
--        isso ajudaria a padronizar a forma como descrever a compilacao das libs lua
local function descriptorPreloaderBasedGenerator(projname, target, projsrc, projurl, projgroup)
  assert(projname and target)
  projsrc = projsrc or PRODAPP.."/"..projname.."/src"
  projgroup = projgroup or projname -- group all loop, luacothread in 'loop' includes
  local tecmake_extra_args = " LUA51="..PRODAPP.."/lua5.1 LOOP_HOME="..PRODAPP.."/loop "
  local darwin_default_spec = { 
    mf = {
      target..tecmake_extra_args,
      target..tecmake_extra_args.." BUILD_DYLIB=Yes",
    },
  }
  
  return { name = projname,
    url = projurl,
    build = {
      type = "tecmake",
      src = projsrc or PRODAPP.."/"..projname.."/src",
      mf = { target..tecmake_extra_args, },
      Darwin = darwin_default_spec,
      MacOS = darwin_default_spec,
      SunOS510_64 = { mf = { target..tecmake_extra_args..SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/lib"..projname..".so"] = "lib",
      ["../lib/${TEC_UNAME}/lib"..projname..".dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/lib"..projname..".*"] = "lib",
      ["../obj/${TEC_UNAME}/"..projname..".h"] = "include/"..projgroup,
      [projname..".h"] = "include/"..projgroup,
    },
  }
end

packages = {
  -- package to download the sources of the oil, scs and friend projects
  { name = "oil-source",
    url = SVNREPURL .. "/oil/trunk",
    directory = PRODAPP .."/oil", 
  },
  { name = "idl-source",
    url = SVNREPURL .. "/openbus/idl/trunk",
    directory = PRODAPP .."/idl",
    install_files = {
      ["src/*.idl"] = "idl/"..IDL_VERSION,
    },
  },
--[[
  { name = "idl-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/idl/docs",
      cmd = "doxygen",
      arguments = "openbus.dox"
    },
    install_files = {
      ["html"] = "doc/openbus_"..IDL_VERSION,
    },
  },
]]
  { name = "idl-prev-source",
    url = SVNREPURL .. "/openbus/idl/tags/OB_IDL_v1_05_02_2011_08_03",
    directory = PRODAPP .."/idl-prev",
    install_files = {
      ["src/*.idl"] = "idl/"..IDL_PREV,
    },
  },
  { name = "idl-prev-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/idl-prev/docs",
      cmd = "doxygen",
      arguments = "openbus.dox"
    },
    install_files = {
      ["html"] = "doc/openbus_"..IDL_PREV,
    },
  },
  { name = "sdk-idl-source",
    url = SVNREPURL .. "/openbus/sdk/idl/trunk",
    install_files = {
      ["src/*.idl"] = "idl/lib",
    }
  },
  { name = "sdk-java-source",
    url = SVNREPURL .. "/openbus/sdk/java/branches/v2_proto",
    directory = PRODAPP .."/sdk-java",
  },
  { name = "sdk-lua-source",
    url = SVNREPURL .. "/openbus/sdk/lua/trunk",
    directory = PRODAPP .."/sdk-lua",
  },
  { name = "sdk-cpp-source",
    url = SVNREPURL .. "/openbus/sdk/cpp/branches/openbus_v2_proto",
    directory = PRODAPP .."/sdk-cpp",
  },
  { name = "openbus-source",
    url = SVNREPURL .. "/openbus/core/trunk",
    directory = SVNDIR, -- main source directory for PUts!
                        -- other sources have to be in PRODAPP/something
  },
  { name = "licenses",
    install_files = {
    [SVNDIR.."/LICENSE"] = ".",
    [SVNDIR.."/README"]  = ".",
    },
  },
  { name = "auxiliar-files",
    install_files = {
      [SVNDIR.."/specs/shell/openssl-generate.ksh"] = "bin",
    },
  },
  { name = "lua5.1",
    url = SVNREPURL .. "/openbus/libs/trunk/lua5.1.3",
    build = {
      type = "tecmake",
      src = PRODAPP .."/lua5.1/src",
      mf = { "config" },
      Darwin = { mf = {"config", "config BUILD_DYLIB=Yes"} },
      MacOS = { mf = {"config", "config BUILD_DYLIB=Yes"} },
      SunOS510_64 = { mf = { "config ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblua5.1.so"] = "lib",
      ["../lib/${TEC_UNAME}/liblua5.1.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liblua5.1.*"] = "lib",
      ["../include/*"] = "include/lua5.1.3",
    },
  },
  { name = "lua5.1-bin",
    build = {
      type = "tecmake",
      src = PRODAPP .."/lua5.1/src",
      mf = { "lua", --[["luac", "bin2c",]] },
      SunOS510_64 = { mf = {"lua ".. SUNOS64_TECMAKE_FLAGS} },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/lua5.1"] = "bin",
    },
  },
  { name = "tolua5.1",
    url = SVNREPURL .. "/openbus/libs/trunk/tolua5.1",
    build = {
      type = "tecmake",
      src = PRODAPP .."/tolua5.1/src",
      mf = { "tolua5lib LUA51=../../lua5.1", "tolua5 LUA51=../../lua5.1" },
      Darwin = { mf = {"tolua5lib LUA51="..PRODAPP.."/lua5.1", "tolua5lib BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1", "tolua5 LUA51="..PRODAPP.."/lua5.1"} },
      MacOS = { mf = {"tolua5lib LUA51="..PRODAPP.."/lua5.1", "tolua5lib BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1", "tolua5 LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "tolua5lib LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS, "tolua5 LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    dev_files = {
      ["../bin/${TEC_UNAME}/tolua5.1"] = "bin",
      ["../lib/${TEC_UNAME}/libtolua5.1.*"] = "lib",
      ["../include/tolua.h"] = "include/tolua5.1",
    },
  },
  { name = "luafilesystem",
    url = SVNREPURL .. "/openbus/libs/trunk/luafilesystem-1.4.2/",
    build = {
      type = "tecmake",
      src = PRODAPP .."/luafilesystem/src",
      mf = { "config LUA51=../../lua5.1", },
      Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      MacOS = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblfs.so"] = "lib",
      ["../lib/${TEC_UNAME}/liblfs.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liblfs.*"] = "lib",
      ["../include/*"] = "include/luafilesystem",
    },
  },
  { name = "luasocket2",
    url = SVNREPURL .. "/openbus/libs/trunk/luasocket2",
    build = {
      type = "tecmake",
      src = PRODAPP .."/luasocket2/src",
      mf = { "config LUA51=../../lua5.1", },
      Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      MacOS = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libluasocket.so"] = "lib",
      ["../lib/${TEC_UNAME}/libluasocket.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libluasocket.*"] = "lib",
      ["luasocket.h"] = "include/luasocket2",
    },
  },
  descriptorPreloaderBasedGenerator("luastruct", "luastruct", nil, SVNREPURL .."/openbus/libs/trunk/struct-1.2"),
  descriptorPreloaderBasedGenerator("luavararg", "luavararg", nil, SVNREPURL .."/openbus/libs/trunk/vararg-1.1"),
  descriptorPreloaderBasedGenerator("loop", "loop", PRODAPP.."/loop/openbus", SVNREPURL .."/loop/trunk", "loop"),
  descriptorPreloaderBasedGenerator("luainspector", "inspector", PRODAPP.."/loop/openbus", nil, "loop"),
  descriptorPreloaderBasedGenerator("luacoroutine", "coroutine", PRODAPP.."/loop/openbus", nil, "loop"),
  descriptorPreloaderBasedGenerator("luacothread", "cothread", PRODAPP.."/loop/openbus", nil, "loop"),
  descriptorPreloaderBasedGenerator("luatuple", "tuple", PRODAPP.."/loop/openbus", nil, "loop"),
  descriptorPreloaderBasedGenerator("luaidl", "luaidl", PRODAPP.."/oil/openbus", nil, "oil"),
  descriptorPreloaderBasedGenerator("oil", "oil", PRODAPP.."/oil/openbus", nil, "oil"),
  { name = "luuid",
    url = SVNREPURL .. "/openbus/libs/trunk/luuid",
    build = {
      type = "tecmake",
      src = PRODAPP .."/luuid/src",
      mf = { "config LUA51=../../lua5.1", },
      Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      MacOS = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libluuid.so"] = "lib",
      ["../lib/${TEC_UNAME}/libluuid.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libluuid.*"] = "lib",
      ["../include/*"] = "include/luuid",
    },
  },
  { name = "lualdap-1.1.0",
    url = SVNREPURL .. "/openbus/libs/trunk/lualdap-1.1.0",
    build = {
      type = "tecmake",
      src = PRODAPP .."/lualdap-1.1.0/src",
      mf = { "config LUA51=../../lua5.1", },
      Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      MacOS = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblualdap.so"] = "lib",
      ["../lib/${TEC_UNAME}/liblualdap.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liblualdap.*"] = "lib",
      ["../include/*"] = "include/lualdap-1.1.0",
    },
  },
  { name = "latt",
    url = SVNREPURL.."/luautils/latt/branches/v1_01_2011_11_17",
    build = {
      type = "tecmake",
      src = PRODAPP .."/latt",
      mf = { },
    },
    dev_files = {
      ["src/*"] = "lib/lua/5.1"
    },
  },
  { name = "scs-idl-prev",
    url = SVNREPURL .. "/scs/core/idl/branches/SCS_CORE_IDL_v1_02_2010_09_21",
    directory = PRODAPP .."/scs-idl-prev",
    install_files = {
      ["src/scs.idl"] = "idl/"..IDL_PREV,
    },
  },
  { name = "scs-idl",
    url = SVNREPURL .. "/scs/core/idl/trunk",
    directory = PRODAPP .."/scs-idl",
    install_files = {
      ["src/scs.idl"] = "idl/"..IDL_VERSION,
    },
  },
  { name = "scs-idl-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/scs-idl/docs",
      cmd = "doxygen",
      arguments = "scs.dox"
    },
    install_files = {
      ["html"] = "doc/scs",
    },
  },
  { name = "luascs",
    url = SVNREPURL .. "/scs/core/lua/trunk",
    directory = PRODAPP .."/scs-lua",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-lua/src",
      mf = { "config LOOP_HOME="..PRODAPP.."/loop LUA51="..PRODAPP.."/lua5.1", },
      Darwin = { mf = {"config LOOP_HOME="..PRODAPP.."/loop LUA51="..PRODAPP.."/lua5.1", "config LOOP_HOME="..PRODAPP.."/loop LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes"} },
      MacOS = { mf = {"config LOOP_HOME="..PRODAPP.."/loop LUA51="..PRODAPP.."/lua5.1", "config LOOP_HOME="..PRODAPP.."/loop LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes"} },
      SunOS510_64 = { mf = { "config LOOP_HOME="..PRODAPP.."/loop LUA51="..PRODAPP.."/lua5.1 "..SUNOS64_TECMAKE_FLAGS, } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libluascs.so"] = "lib",
      ["../lib/${TEC_UNAME}/libluascs.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libluascs.*"] = "lib",
      ["../obj/${TEC_UNAME}/luascs.h"] = "include/scs/lua",
      ["../schema/*"] = "schema",
    },
  },
  { name = "scsoil",
    url = SVNREPURL .. "/scs/core/cppoil/trunk",
    directory = PRODAPP .."/scs-cppoil",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-cppoil/src",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", },
      Darwin = { mf = {
        "config LUA51="..PRODAPP.."/lua5.1",
        "config LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes"}, },
      MacOS = { mf = {
        "config LUA51="..PRODAPP.."/lua5.1",
        "config LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes"}, },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libscsoil.so"] = "lib",
      ["../lib/${TEC_UNAME}/libscsoil.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libscsoil.*"] = "lib",
      ["*.h"] = "include/scs/cppoil/",
      ["luaidl/*.h"] = "include/scs/cppoil/luaidl/",
    },
  },
  { name = "luatrace",
    url = SVNREPURL .. "/openbus/libs/trunk/luatrace",
    build = {
      type = "command",
      src = PRODAPP .."/luatrace",
      Linux = { cmd = "make PLAT=linux reader static-writer dynamic-writer "..
         "&& make PLAT=linux INSTALL_TOP=" .. TMPDIR  ..
         " install-reader install-static-writer install-dynamic-writer",
      },
    },
    install_files = {
        [TMPDIR .. "/bin/luatrace"]                       = "bin",
        [TMPDIR .. "/lib/libluatrace_*.so"]               = "lib",
        [TMPDIR .. "/lib/lua/5.1/trace/*.so"]             = "lib/trace",
        [TMPDIR .. "/lib/lua/5.1/trace/inputstream/*.so"] = "lib/trace/inputstream",
        [TMPDIR .. "/lib/lua/5.1/trace/msgdecoder/*.so"]  = "lib/trace/msgdecoder",
        [TMPDIR .. "/lib/lua/5.1/trace/msgreader/*.so"]   = "lib/trace/msgreader",
        [TMPDIR .. "/share/lua/5.1/trace/manager.lua"]    = "lib/lua/5.1/trace",
    },
  },
  { name = "lce",
    url = SVNREPURL.."/luautils/lce/trunk",
    build = {
      type = "tecmake",
      src = PRODAPP.."/lce/src",
      mf = { "config LUA51="..PRODAPP.."/lua5.1 LOOP_HOME="..PRODAPP.."/loop BUILD_DYLIB=Yes", },
      --Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      --MacOS = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 LOOP_HOME="..PRODAPP.."/loop ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblce*.so"] = "lib",
      ["../lib/${TEC_UNAME}/liblce*.dylib"] = "lib",
    },
    dev_files = {
      ["../include/*"] = "include/lce/",
      ["../lib/${TEC_UNAME}/liblce.*"] = "lib",
    },
  },
  { name = "openbus-lua",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-lua/src",
      mf = { "openbus LUA51="..PRODAPP.."/lua5.1 OIL_HOME="..PRODAPP.."/oil LOOP_HOME="..PRODAPP.."/loop BUILD_DYLIB=YES" },
      --Darwin = { mf = { "config LUA51="..PRODAPP.."/lua5.1","config LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=YES" }, },
      --MacOS = { mf = { "config LUA51="..PRODAPP.."/lua5.1","config LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=YES" }, },
      SunOS510_64 = { mf = { "openbus LUA51="..PRODAPP.."/lua5.1 OIL_HOME="..PRODAPP.."/oil LOOP_HOME="..PRODAPP.."/loop ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libluaopenbus.so"] = "lib",
      ["../lib/${TEC_UNAME}/libluaopenbus.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libluaopenbus.*"] = "lib",
      ["../obj/${TEC_UNAME}/luaopenbus.h"] = "include/openbus/lua/",
    },
  },
  { name = "openbus-luaconsole",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-lua/src",
      mf = { "busconsole LUA51="..PRODAPP.."/lua5.1 OIL_HOME="..PRODAPP.."/oil LOOP_HOME="..PRODAPP.."/loop ", },
      SunOS510_64 = { mf = { "busconsole LUA51="..PRODAPP.."/lua5.1 OIL_HOME="..PRODAPP.."/oil LOOP_HOME="..PRODAPP.."/loop ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/busconsole"] = "bin",
    },
  },
  { name = "openbus-busservices",
    build = {
      type = "tecmake",
      src = SVNDIR .."/src",
      mf = { "busservices LUA51="..PRODAPP.."/lua5.1 OIL_HOME="..PRODAPP.."/oil LOOP_HOME="..PRODAPP.."/loop ", },
      SunOS510_64 = { mf = { "busservices LUA51="..PRODAPP.."/lua5.1 OIL_HOME="..PRODAPP.."/oil LOOP_HOME="..PRODAPP.."/loop ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/busservices"] = "bin",
      ["../specs/management"] = "specs",
      ["../specs/shell"] = "specs",
      ["../specs/templates"] = "specs",
      ["../test/*"] = "test",
    },
    -- TODO: include here all templates/openbus.lua messages table!!
    conf_template = {
      SVNDIR .."/specs/templates/openbus.lua",
    },
    dev_files = {
      ["../test/*"] = "test",
    },
  },
  { name = "openbus-busadmin",
    build = {
      type = "tecmake",
      src = SVNDIR .."/src",
      mf = { "busadmin LUA51="..PRODAPP.."/lua5.1 OIL_HOME="..PRODAPP.."/oil LOOP_HOME="..PRODAPP.."/loop ", },
      SunOS510_64 = { mf = { "busadmin LUA51="..PRODAPP.."/lua5.1 OIL_HOME="..PRODAPP.."/oil LOOP_HOME="..PRODAPP.."/loop ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/busadmin"] = "bin",
    },
  },
  { name = "openbus-demo-hello-lua",
    directory = PRODAPP .."/sdk-lua/demo/hello",
    dev_files = {
      ["client.lua"] = "demo/lua/hello",
      ["server.lua"] = "demo/lua/hello",
      ["run"] = "demo/lua/hello",
      ["Hello.properties"] = "demo/lua/hello",
      ["idl"] = "demo/lua/hello",
      ["management"] = "demo/lua/hello",
    },
  },
  { name = "openbus-demo-eventsink-lua",
    directory = PRODAPP .."/sdk-lua/demo/eventSink",
    dev_files = {
      ["client.lua"] = "demo/lua/eventSink",
      ["client.sh"] = "demo/lua/eventSink",
      ["server.lua"] = "demo/lua/eventSink",
      ["server.sh"] = "demo/lua/eventSink",
      ["EventSink.properties"] = "demo/lua/eventSink",
      ["management"] = "demo/lua/eventSink",
    },
  },
  { name = "openbus-demo-delegate-lua",
    directory = PRODAPP .."/sdk-lua/demo/delegate",
    dev_files = {
      ["client.lua"] = "demo/lua/delegate",
      ["server.lua"] = "demo/lua/delegate",
      ["run"] = "demo/lua/delegate",
      ["Delegate.properties"] = "demo/lua/delegate",
      ["idl"] = "demo/lua/delegate",
      ["management"] = "demo/lua/delegate",
    },
  },
  -- MICO related packages
  { name = "scs-cpp-micomultithread",
    url = SVNREPURL .. "/scs/core/cpp/trunk",
    directory = PRODAPP .."/scs-cpp",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-cpp",
      mf = { 
        "mico genstubs SCS_THREADING_ENABLED=Yes", 
        "mico LUA51="..PRODAPP.."/lua5.1 SCS_THREADING_ENABLED=Yes" 
      },
      Darwin = {
        mf = { 
          "mico genstubs LD=g++ SCS_THREADING_ENABLED=Yes", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1 SCS_THREADING_ENABLED=Yes" 
        },
      },
      MacOS = {
        mf = { 
          "mico genstubs LD=g++ SCS_THREADING_ENABLED=Yes", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1 SCS_THREADING_ENABLED=Yes" 
        },
      },
    },
    install_files = {
      ["lib/${TEC_UNAME}/libscs-micomultithread.*"] = "lib",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/scs.idl"] =
          "idl/"..IDL_VERSION,
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libscs-micomultithread.*"] = "lib",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/scs.idl"] =
          "idl/"..IDL_VERSION,
      ["include/scs/*"] = "include/scs",
      ["stubs/mico"] = "include/scs/stubs",
    },
  },
  { name = "scs-cpp-micomultithread-debug",
    url = SVNREPURL .. "/scs/core/cpp/trunk",
    directory = PRODAPP .."/scs-cpp",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-cpp",
      mf = { 
        "mico genstubs SCS_THREADING_ENABLED=Yes DBG=Yes", 
        "mico LUA51="..PRODAPP.."/lua5.1 SCS_THREADING_ENABLED=Yes DBG=Yes" 
      },
      Darwin = {
        mf = { 
          "mico genstubs LD=g++ SCS_THREADING_ENABLED=Yes DBG=Yes", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1 SCS_THREADING_ENABLED=Yes DBG=Yes" 
        },
      },
      MacOS = {
        mf = { 
          "mico genstubs LD=g++ SCS_THREADING_ENABLED=Yes DBG=Yes", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1 SCS_THREADING_ENABLED=Yes DBG=Yes" 
        },
      },
    },
    install_files = {
      ["lib/${TEC_UNAME}/libscs-micomultithread-debug.*"] = "lib",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/scs.idl"] =
          "idl/"..IDL_VERSION,
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libscs-micomultithread-debug.*"] = "lib",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/scs.idl"] =
          "idl/"..IDL_VERSION,
      ["include/scs/*"] = "include/scs",
      ["stubs/mico"] = "include/scs/stubs",
    },
  },
  { name = "scs-cpp-micosinglethread",
    url = SVNREPURL .. "/scs/core/cpp/trunk",
    directory = PRODAPP .."/scs-cpp",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-cpp",
      mf = { 
        "mico genstubs", 
        "mico LUA51="..PRODAPP.."/lua5.1"
      },
      Darwin = {
        mf = { 
          "mico genstubs LD=g++", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1" 
        },
      },
      MacOS = {
        mf = { 
          "mico genstubs LD=g++", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1" 
        },
      },
    },
    install_files = {
      ["lib/${TEC_UNAME}/libscs-micosinglethread.*"] = "lib",
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/scs.idl"] =
          "idl/"..IDL_VERSION,
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libscs-micosinglethread.*"] = "lib",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/scs.idl"] =
          "idl/"..IDL_VERSION,
      ["include/scs/*"] = "include/scs",
      ["stubs/mico"] = "include/scs/stubs",
    },
  },
  { name = "scs-cpp-micosinglethread-debug",
    url = SVNREPURL .. "/scs/core/cpp/trunk",
    directory = PRODAPP .."/scs-cpp",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-cpp",
      mf = { 
        "mico genstubs DBG=Yes", 
        "mico LUA51="..PRODAPP.."/lua5.1 DBG=Yes"
      },
      Darwin = {
        mf = { 
          "mico genstubs LD=g++ DBG=Yes", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1 DBG=Yes" 
        },
      },
      MacOS = {
        mf = { 
          "mico genstubs LD=g++ DBG=Yes", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1 DBG=Yes" 
        },
      },
    },
    install_files = {
      ["lib/${TEC_UNAME}/libscs-micosinglethread-debug.*"] = "lib",
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/scs.idl"] =
          "idl/"..IDL_VERSION,
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libscs-micosinglethread-debug.*"] = "lib",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/scs.idl"] =
          "idl/"..IDL_VERSION,
      ["include/scs/*"] = "include/scs",
      ["stubs/mico"] = "include/scs/stubs",
    },
  },
  { name = "openbus-sdkcpp-micomultithread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp",
      mf = { 
        "config genstubs OPENBUS_SDK_MULTITHREAD=Yes", 
        "config  OPENBUS_SDK_MULTITHREAD=Yes" },
      Darwin = {
        mf = { 
          "config genstubs LD=g++ OPENBUS_SDK_MULTITHREAD=Yes", 
          "config LD=g++ OPENBUS_SDK_MULTITHREAD=Yes" 
        },
      },
      MacOS = {
        mf = { 
          "config genstubs LD=g++ OPENBUS_SDK_MULTITHREAD=Yes", 
          "config LD=g++ OPENBUS_SDK_MULTITHREAD=Yes" 
        },
      },
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libopenbus-micomultithread.*"] = "lib",
      ["include/openbus"] = "include/openbus/cpp",    --include
      ["stubs"] = "include/openbus/cpp",     --include
      ["legacy/idl/*"] = "idl/legacy/openbus/cpp",     --include
      [INSTALL.TOP.."/idl/"..IDL_PREV.."/*"] = "idl/"..IDL_PREV,
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/*"] = "idl/"..IDL_VERSION,
    },
  },
  { name = "openbus-extension-cpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/extension",
      mf = { 
        "config  EXTENSION_SDK_MULTITHREAD=Yes DBG=Yes" },
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libextension-micomultithread-debug.*"] = "lib",
      ["include/openbus"] = "include/openbus/cpp",    --include
    },
  },
  { name = "openbus-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp",
      mf = { 
        "config genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "config  OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes" },
      Darwin = {
        mf = { 
          "config genstubs LD=g++ OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
          "config LD=g++ OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes" 
        },
      },
      MacOS = {
        mf = { 
          "config genstubs LD=g++ OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
          "config LD=g++ OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes" 
        },
      },
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libopenbus-micomultithread-debug.*"] = "lib",
      ["include/openbus"] = "include/openbus/cpp",    --include
      ["stubs"] = "include/openbus/cpp",     --include
      ["legacy/idl/*"] = "idl/legacy/openbus/cpp",     --include
      [INSTALL.TOP.."/idl/"..IDL_PREV.."/*"] = "idl/"..IDL_PREV,
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/*"] = "idl/"..IDL_VERSION,
    },
  },
  { name = "openbus-sdkcpp-micosinglethread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp",
      mf = { 
        "config genstubs", 
        "config" },
      Darwin = {
        mf = { 
          "config genstubs LD=g++", 
          "config LD=g++" 
        },
      },
      MacOS = {
        mf = { 
          "config genstubs LD=g++", 
          "config LD=g++" 
        },
      },
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libopenbus-micosinglethread.*"] = "lib",
      ["include/openbus"] = "include/openbus/cpp",    --include
      ["stubs"] = "include/openbus/cpp",     --include
      ["legacy/idl/*"] = "idl/legacy/openbus/cpp",     --include
      [INSTALL.TOP.."/idl/"..IDL_PREV.."/*"] = "idl/"..IDL_PREV,
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/*"] = "idl/"..IDL_VERSION,
    },
  },
  { name = "openbus-sdkcpp-micosinglethread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp",
      mf = { 
        "config genstubs DBG=Yes", 
        "config DBG=Yes" },
      Darwin = {
        mf = { 
          "config genstubs LD=g++ DBG=Yes", 
          "config LD=g++ DBG=Yes" 
        },
      },
      MacOS = {
        mf = { 
          "config genstubs LD=g++ DBG=Yes", 
          "config LD=g++ DBG=Yes" 
        },
      },
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libopenbus-micosinglethread-debug.*"] = "lib",
      ["include/openbus"] = "include/openbus/cpp",    --include
      ["stubs"] = "include/openbus/cpp",     --include
      ["legacy/idl/*"] = "idl/legacy/openbus/cpp",     --include
      [INSTALL.TOP.."/idl/"..IDL_PREV.."/*"] = "idl/"..IDL_PREV,
      [INSTALL.TOP.."/idl/"..IDL_VERSION.."/*"] = "idl/"..IDL_VERSION,
    },
  },
  { name = "openbus-demo-hello-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/hello",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes" 
      },
--[[      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      }, 
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      } --]]
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/hello/bin",
      ["../idl/hello.idl"] = "demo/sdkcpp/hello/idl/",
      ["admin"] = "demo/sdkcpp/hello",
      ["../../README"] = "demo/sdkcpp/hello",
      ["src/client.cpp"] = "demo/sdkcpp/hello/src",
      ["src/server.cpp"] = "demo/sdkcpp/hello/src",
      ["*.mak"] = "demo/sdkcpp/hello",
      ["*config"] = "demo/sdkcpp/hello",
      ["client"] = "demo/sdkcpp/hello",
      ["server"] = "demo/sdkcpp/hello",
    },
  },
  { name = "openbus-demo-hello-extension-cpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/extension/demo/hello",
      mf = { 
        "server genstubs EXTENSION_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes EXTENSION_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes EXTENSION_SDK_MULTITHREAD=Yes",
      },
    },
    dev_files = {
      -- ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/hello/bin",
      -- ["../idl/hello.idl"] = "demo/sdkcpp/hello/idl/",
      -- ["admin"] = "demo/sdkcpp/hello",
      -- ["../../README"] = "demo/sdkcpp/hello",
      -- ["src/client.cpp"] = "demo/sdkcpp/hello/src",
      -- ["src/server.cpp"] = "demo/sdkcpp/hello/src",
      -- ["*.mak"] = "demo/sdkcpp/hello",
      -- ["*config"] = "demo/sdkcpp/hello",
      -- ["client"] = "demo/sdkcpp/hello",
      -- ["server"] = "demo/sdkcpp/hello",
    },
  },
  { name = "openbus-demo-dedicated-clock-extension-cpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/extension/demo/dedicated_clock",
      mf = { 
        "client genstubs EXTENSION_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes EXTENSION_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes EXTENSION_SDK_MULTITHREAD=Yes",
      },
    },
    dev_files = {
      -- ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/hello/bin",
      -- ["../idl/hello.idl"] = "demo/sdkcpp/hello/idl/",
      -- ["admin"] = "demo/sdkcpp/hello",
      -- ["../../README"] = "demo/sdkcpp/hello",
      -- ["src/client.cpp"] = "demo/sdkcpp/hello/src",
      -- ["src/server.cpp"] = "demo/sdkcpp/hello/src",
      -- ["*.mak"] = "demo/sdkcpp/hello",
      -- ["*config"] = "demo/sdkcpp/hello",
      -- ["client"] = "demo/sdkcpp/hello",
      -- ["server"] = "demo/sdkcpp/hello",
    },
  },
  { name = "openbus-demo-independent-clock-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/independent_clock",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes" 
      },
--[[      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      }, 
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      } --]]
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/independent_clock/bin",
      ["../idl/independent_clock.idl"] = "demo/sdkcpp/independent_clock/idl/",
      ["admin"] = "demo/sdkcpp/independent_clock",
      ["../../README"] = "demo/sdkcpp/independent_clock",
      ["src/client.cpp"] = "demo/sdkcpp/independent_clock/src",
      ["src/server.cpp"] = "demo/sdkcpp/independent_clock/src",
      ["*.mak"] = "demo/sdkcpp/independent_clock",
      ["*config"] = "demo/sdkcpp/independent_clock",
      ["client"] = "demo/sdkcpp/independent_clock",
      ["server"] = "demo/sdkcpp/independent_clock",
    },
  },
  { name = "openbus-demo-dedicated-clock-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/dedicated_clock",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes" 
      },
--[[      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      }, 
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      } --]]
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/dedicated_clock/bin",
      ["../idl/dedicated_clock.idl"] = "demo/sdkcpp/dedicated_clock/idl/",
      ["admin"] = "demo/sdkcpp/dedicated_clock",
      ["../../README"] = "demo/sdkcpp/dedicated_clock",
      ["src/client.cpp"] = "demo/sdkcpp/dedicated_clock/src",
      ["src/server.cpp"] = "demo/sdkcpp/dedicated_clock/src",
      ["*.mak"] = "demo/sdkcpp/dedicated_clock",
      ["*config"] = "demo/sdkcpp/dedicated_clock",
      ["client"] = "demo/sdkcpp/dedicated_clock",
      ["server"] = "demo/sdkcpp/dedicated_clock",
    },
  },
  { name = "openbus-demo-greetings-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/greetings",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes" 
      },
--[[      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      }, 
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      } --]]
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/greetings/bin",
      ["../idl/greetings.idl"] = "demo/sdkcpp/greetings/idl/",
      ["admin"] = "demo/sdkcpp/greetings",
      ["../../README"] = "demo/sdkcpp/greetings",
      ["src/client.cpp"] = "demo/sdkcpp/greetings/src",
      ["src/server.cpp"] = "demo/sdkcpp/greetings/src",
      ["*.mak"] = "demo/sdkcpp/greetings",
      ["*config"] = "demo/sdkcpp/greetings",
      ["client"] = "demo/sdkcpp/greetings",
      ["server"] = "demo/sdkcpp/greetings",
    },
  },
  { name = "openbus-demo-chain-validation-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/chain_validation",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "executive LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "secretary LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
      },
--[[      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      }, 
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      } --]]
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/chain_validation/bin",
      ["../idl/chain_validation.idl"] = "demo/sdkcpp/chain_validation/idl/",
      ["admin"] = "demo/sdkcpp/chain_validation",
      ["../../README"] = "demo/sdkcpp/chain_validation",
      ["src/client.cpp"] = "demo/sdkcpp/chain_validation/src",
      ["src/server.cpp"] = "demo/sdkcpp/chain_validation/src",
      ["*.mak"] = "demo/sdkcpp/chain_validation",
      ["*config"] = "demo/sdkcpp/chain_validation",
      ["client"] = "demo/sdkcpp/chain_validation",
      ["server"] = "demo/sdkcpp/chain_validation",
    },
  },
  { name = "openbus-demo-audit-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/audit",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "proxy LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
      },
--[[      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      }, 
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      } --]]
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/audit/bin",
      ["../idl/audit.idl"] = "demo/sdkcpp/audit/idl/",
      ["admin"] = "demo/sdkcpp/audit",
      ["../../README"] = "demo/sdkcpp/audit",
      ["src/client.cpp"] = "demo/sdkcpp/audit/src",
      ["src/server.cpp"] = "demo/sdkcpp/audit/src",
      ["*.mak"] = "demo/sdkcpp/audit",
      ["*config"] = "demo/sdkcpp/audit",
      ["client"] = "demo/sdkcpp/audit",
      ["server"] = "demo/sdkcpp/audit",
    },
  },
  { name = "openbus-demo-multiplexing-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/multiplexing",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
      },
--[[      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      }, 
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      } --]]
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/multiplexing/bin",
      ["../idl/multiplexing.idl"] = "demo/sdkcpp/multiplexing/idl/",
      ["admin"] = "demo/sdkcpp/multiplexing",
      ["../../README"] = "demo/sdkcpp/multiplexing",
      ["src/client.cpp"] = "demo/sdkcpp/multiplexing/src",
      ["src/server.cpp"] = "demo/sdkcpp/multiplexing/src",
      ["*.mak"] = "demo/sdkcpp/multiplexing",
      ["*config"] = "demo/sdkcpp/multiplexing",
      ["client"] = "demo/sdkcpp/multiplexing",
      ["server"] = "demo/sdkcpp/multiplexing",
    },
  },
  { name = "openbus-demo-sharedauth-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/sharedauth",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "client_sharedauth LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes OPENBUS_SDK_MULTITHREAD=Yes",
      },
--[[      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
--          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      }, 
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
--               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      } --]]
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/sdkcpp/sharedauth/bin",
      ["../idl/multiplexing.idl"] = "demo/sdkcpp/sharedauth/idl/",
      ["admin"] = "demo/sdkcpp/sharedauth",
      ["../../README"] = "demo/sdkcpp/sharedauth",
      ["src/client.cpp"] = "demo/sdkcpp/sharedauth/src",
      ["src/server.cpp"] = "demo/sdkcpp/sharedauth/src",
      ["*.mak"] = "demo/sdkcpp/sharedauth",
      ["*config"] = "demo/sdkcpp/sharedauth",
      ["client"] = "demo/sdkcpp/sharedauth",
      ["server"] = "demo/sdkcpp/sharedauth",
    },
  },
  { name = "openbus-interop-simple-sdkcpp-micomultithread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/simple",
      mf = { 
        "server genstubs OPENBUS_SDK_MULTITHREAD=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes" 
      },
      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/simple/bin",
      ["../idl/simple.idl"] = "interop/simple/idl/",
      ["admin"] = "interop/simple",
      ["../../README"] = "interop",      
      ["src/client.cpp"] = "interop/simple/src",
      ["src/server.cpp"] = "interop/simple/src",
      ["*.mak"] = "interop/simple",
      ["*config"] = "interop/simple",
      ["client"] = "interop/simple",
      ["server"] = "interop/simple",
    },
  },
  { name = "openbus-interop-simple-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/simple",
      mf = { 
        "server genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes" 
      },
      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes"}, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/simple/bin",
      ["../idl/simple.idl"] = "interop/simple/idl/",
      ["admin"] = "interop/simple",
      ["../../README"] = "interop",      
      ["src/client.cpp"] = "interop/simple/src",
      ["src/server.cpp"] = "interop/simple/src",
      ["*.mak"] = "interop/simple",
      ["*config"] = "interop/simple",
      ["client"] = "interop/simple",
      ["server"] = "interop/simple",
    },
  },
  { name = "openbus-interop-simple-sdkcpp-micosinglethread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/simple",
      mf = { 
        "server genstubs", 
        "client LUA51="..PRODAPP.."/lua5.1",
        "server LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510 = { 
        mf = { 
          "server genstubs ",
          'client "LUA51='..PRODAPP..'/lua5.1"',
          'server "LUA51='..PRODAPP..'/lua5.1"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes"}, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/simple/bin",
      ["idl"] = "interop/simple",
      ["admin"] = "interop/simple",
      ["../../README"] = "interop",      
      ["src/client.cpp"] = "interop/simple/src",
      ["src/server.cpp"] = "interop/simple/src",
      ["*.mak"] = "interop/simple",
      ["*config"] = "interop/simple",
      ["client"] = "interop/simple",
      ["server"] = "interop/simple",
    },
  },
  { name = "openbus-interop-simple-sdkcpp-micosinglethread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/simple",
      mf = { 
        "server genstubs DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes" 
      },
      SunOS510 = { 
        mf = { 
          "server genstubs  DBG=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 DBG=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 DBG=Yes"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes DBG=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes"}, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/simple/bin",
      ["idl"] = "interop/simple",
      ["admin"] = "interop/simple",
      ["../../README"] = "interop",      
      ["src/client.cpp"] = "interop/simple/src",
      ["src/server.cpp"] = "interop/simple/src",
      ["*.mak"] = "interop/simple",
      ["*config"] = "interop/simple",
      ["client"] = "interop/simple",
      ["server"] = "interop/simple",
    },
  },
  { name = "openbus-interop-sharedauth-sdkcpp-micomultithread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/sharedauth",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes",
        "client-sharedauth LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes" 
      },
      SunOS510_64 = { 
        mf = { "client genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client-sharedauth LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes"}, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/sharedauth/bin",
      ["../../README"] = "interop",      
      ["src/client.cpp"] = "interop/sharedauth/src",
      ["src/client-sharedauth.cpp"] = "interop/sharedauth/src",
      ["*.mak"] = "interop/sharedauth",
      ["*config"] = "interop/sharedauth",
      ["client"] = "interop/sharedauth",
      ["client-sharedauth"] = "interop/sharedauth",
    },
  },
  { name = "openbus-interop-sharedauth-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/sharedauth",
      mf = { 
        "client genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "client-sharedauth LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes" 
      },
      SunOS510_64 = { 
        mf = { "client genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
               "client-sharedauth LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes"}, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/sharedauth/bin",
      ["../../README"] = "interop",      
      ["src/client.cpp"] = "interop/sharedauth/src",
      ["src/client-sharedauth.cpp"] = "interop/sharedauth/src",
      ["*.mak"] = "interop/sharedauth",
      ["*config"] = "interop/sharedauth",
      ["client"] = "interop/sharedauth",
      ["client-sharedauth"] = "interop/sharedauth",
    },
  },
  { name = "openbus-interop-sharedauth-sdkcpp-micosinglethread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/sharedauth",
      mf = { 
        "client genstubs", 
        "client LUA51="..PRODAPP.."/lua5.1",
        "client-sharedauth LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510_64 = { 
        mf = { "client genstubs USE_NODEPEND=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes", 
               "client-sharedauth LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes"}, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/sharedauth/bin",
      ["../../README"] = "interop",      
      ["src/client.cpp"] = "interop/sharedauth/src",
      ["src/client-sharedauth.cpp"] = "interop/sharedauth/src",
      ["*.mak"] = "interop/sharedauth",
      ["*config"] = "interop/sharedauth",
      ["client"] = "interop/sharedauth",
      ["client-sharedauth"] = "interop/sharedauth",
    },
  },
  { name = "openbus-interop-sharedauth-sdkcpp-micosinglethread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/sharedauth",
      mf = { 
        "client genstubs DBG=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes",
        "client-sharedauth LUA51="..PRODAPP.."/lua5.1 DBG=Yes" 
      },
      SunOS510_64 = { 
        mf = { "client genstubs USE_NODEPEND=Yes DBG=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes", 
               "client-sharedauth LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes"},
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/sharedauth/bin",
      ["../../README"] = "interop",      
      ["src/client.cpp"] = "interop/sharedauth/src",
      ["src/client-sharedauth.cpp"] = "interop/sharedauth/src",
      ["*.mak"] = "interop/sharedauth",
      ["*config"] = "interop/sharedauth",
      ["client"] = "interop/sharedauth",
      ["client-sharedauth"] = "interop/sharedauth",
    },
  },
  { name = "openbus-interop-delegation-sdkcpp-micosinglethread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/delegation",
      mf = { 
        "messenger genstubs", 
        "messenger LUA51="..PRODAPP.."/lua5.1",
        "forwarder LUA51="..PRODAPP.."/lua5.1",
        "broadcaster LUA51="..PRODAPP.."/lua5.1",
        "client LUA51="..PRODAPP.."/lua5.1",
      },
      SunOS510_64 = { 
        mf = { "messenger genstubs USE_NODEPEND=Yes", 
               "messenger LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes", 
               "forwarder LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes", 
               "broadcaster LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes",
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes",
        },
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/delegation/bin",
      ["idl"] = "interop/delegation",
      ["admin"] = "interop/delegation",
      ["../../README"] = "demo",      
      ["src/forwarder.cpp"] = "interop/delegation/src",
      ["src/broadcaster.cpp"] = "interop/delegation/src",
      ["src/messenger.cpp"] = "interop/delegation/src",
      ["src/client.cpp"] = "interop/delegation/src",
      ["*.mak"] = "interop/delegation",
      ["*config"] = "interop/delegation",
      ["forwarder"] = "interop/delegation",
      ["messenger"] = "interop/delegation",
      ["broadcaster"] = "interop/delegation",
      ["client"] = "interop/delegation",
    },
  },
  { name = "openbus-interop-delegation-sdkcpp-micosinglethread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/delegation",
      mf = { 
        "messenger genstubs DBG=Yes", 
        "messenger LUA51="..PRODAPP.."/lua5.1 DBG=Yes",
        "forwarder LUA51="..PRODAPP.."/lua5.1 DBG=Yes",
        "broadcaster LUA51="..PRODAPP.."/lua5.1 DBG=Yes",
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes",
      },
      SunOS510_64 = { 
        mf = { "messenger genstubs USE_NODEPEND=Yes DBG=Yes", 
               "messenger LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes", 
               "forwarder LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes", 
               "broadcaster LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes",
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes",
        },
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/delegation/bin",
      ["idl"] = "interop/delegation",
      ["admin"] = "interop/delegation",
      ["../../README"] = "demo",      
      ["src/forwarder.cpp"] = "interop/delegation/src",
      ["src/broadcaster.cpp"] = "interop/delegation/src",
      ["src/messenger.cpp"] = "interop/delegation/src",
      ["src/client.cpp"] = "interop/delegation/src",
      ["*.mak"] = "interop/delegation",
      ["*config"] = "interop/delegation",
      ["forwarder"] = "interop/delegation",
      ["messenger"] = "interop/delegation",
      ["broadcaster"] = "interop/delegation",
      ["client"] = "interop/delegation",
    },
  },
  { name = "openbus-interop-delegation-sdkcpp-micomultithread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/delegation",
      mf = { 
        "messenger genstubs OPENBUS_SDK_MULTITHREAD=Yes", 
        "messenger LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes",
        "forwarder LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes",
        "broadcaster LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes",
        "client LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes",
      },
      SunOS510_64 = { 
        mf = { "messenger genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "messenger LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "forwarder LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "broadcaster LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes",
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        },
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/delegation/bin",
      ["idl"] = "interop/delegation",
      ["admin"] = "interop/delegation",
      ["../../README"] = "demo",      
      ["src/forwarder.cpp"] = "interop/delegation/src",
      ["src/broadcaster.cpp"] = "interop/delegation/src",
      ["src/messenger.cpp"] = "interop/delegation/src",
      ["src/client.cpp"] = "interop/delegation/src",
      ["*.mak"] = "interop/delegation",
      ["*config"] = "interop/delegation",
      ["forwarder"] = "interop/delegation",
      ["messenger"] = "interop/delegation",
      ["broadcaster"] = "interop/delegation",
      ["client"] = "interop/delegation",
    },
  },
  { name = "openbus-interop-delegation-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/delegation",
      mf = { 
        "messenger genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "messenger LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "forwarder LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "broadcaster LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "client LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
      },
      SunOS510_64 = { 
        mf = { "messenger genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "messenger LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
               "forwarder LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
               "broadcaster LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        },
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/delegation/bin",
      ["idl"] = "interop/delegation",
      ["admin"] = "interop/delegation",
      ["../../README"] = "demo",      
      ["src/forwarder.cpp"] = "interop/delegation/src",
      ["src/broadcaster.cpp"] = "interop/delegation/src",
      ["src/messenger.cpp"] = "interop/delegation/src",
      ["src/client.cpp"] = "interop/delegation/src",
      ["*.mak"] = "interop/delegation",
      ["*config"] = "interop/delegation",
      ["forwarder"] = "interop/delegation",
      ["messenger"] = "interop/delegation",
      ["broadcaster"] = "interop/delegation",
      ["client"] = "interop/delegation",
    },
  },
  { name = "openbus-interop-multiplexing-sdkcpp-micomultithread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/multiplexing",
      mf = { 
        "server genstubs OPENBUS_SDK_MULTITHREAD=Yes", 
        "server LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes",
        "client LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes",
      },
      SunOS510 = { 
        mf = { 
          "server genstubs OPENBUS_SDK_MULTITHREAD=Yes",
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes OPENBUS_SDK_MULTITHREAD=Yes",
        },
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/multiplexing/bin",
      ["idl"] = "interop/multiplexing",
      ["admin"] = "interop/multiplexing",
      ["../../README"] = "demo",      
      ["src/server.cpp"] = "interop/multiplexing/src",
      ["src/client.cpp"] = "interop/multiplexing/src",
      ["*.mak"] = "interop/multiplexing",
      ["*config"] = "interop/multiplexing",
      ["server"] = "interop/multiplexing",
      ["client"] = "interop/multiplexing",
    },
  },
  { name = "openbus-interop-multiplexing-sdkcpp-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/multiplexing",
      mf = { 
        "server genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes", 
        "server LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "client LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
      },
      SunOS510 = { 
        mf = { 
          "server genstubs DBG=Yes",
          'server "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes"',
          'client "LUA51='..PRODAPP..'/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes DBG=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes USE_NODEPEND=Yes DBG=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 OPENBUS_SDK_MULTITHREAD=Yes USE_NODEPEND=Yes DBG=Yes",
        },
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/multiplexing/bin",
      ["idl"] = "interop/multiplexing",
      ["admin"] = "interop/multiplexing",
      ["../../README"] = "demo",      
      ["src/server.cpp"] = "interop/multiplexing/src",
      ["src/client.cpp"] = "interop/multiplexing/src",
      ["*.mak"] = "interop/multiplexing",
      ["*config"] = "interop/multiplexing",
      ["server"] = "interop/multiplexing",
      ["client"] = "interop/multiplexing",
    },
  },
  { name = "openbus-interop-multiplexing-sdkcpp-micosinglethread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/multiplexing",
      mf = { 
        "server genstubs", 
        "server LUA51="..PRODAPP.."/lua5.1",
        "client LUA51="..PRODAPP.."/lua5.1",
      },
      SunOS510 = { 
        mf = { 
          "server genstubs ",
          'server "LUA51='..PRODAPP..'/lua5.1"',
          'client "LUA51='..PRODAPP..'/lua5.1"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes",
        },
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/multiplexing/bin",
      ["idl"] = "interop/multiplexing",
      ["admin"] = "interop/multiplexing",
      ["../../README"] = "demo",      
      ["src/server.cpp"] = "interop/multiplexing/src",
      ["src/client.cpp"] = "interop/multiplexing/src",
      ["*.mak"] = "interop/multiplexing",
      ["*config"] = "interop/multiplexing",
      ["server"] = "interop/multiplexing",
      ["client"] = "interop/multiplexing",
    },
  },
  { name = "openbus-interop-multiplexing-sdkcpp-micosinglethread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/interop/multiplexing",
      mf = { 
        "server genstubs DBG=Yes", 
        "server LUA51="..PRODAPP.."/lua5.1 DBG=Yes",
        "client LUA51="..PRODAPP.."/lua5.1 DBG=Yes",
      },
      SunOS510 = { 
        mf = { 
          "server genstubs DBG=Yes",
          'server "LUA51='..PRODAPP..'/lua5.1 DBG=Yes"',
          'client "LUA51='..PRODAPP..'/lua5.1 DBG=Yes"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes DBG=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes DBG=Yes",
        },
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "interop/multiplexing/bin",
      ["idl"] = "interop/multiplexing",
      ["admin"] = "interop/multiplexing",
      ["../../README"] = "demo",      
      ["src/server.cpp"] = "interop/multiplexing/src",
      ["src/client.cpp"] = "interop/multiplexing/src",
      ["*.mak"] = "interop/multiplexing",
      ["*config"] = "interop/multiplexing",
      ["server"] = "interop/multiplexing",
      ["client"] = "interop/multiplexing",
    },
  },
  { name = "openbus-sdkcpp-test-micosinglethread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/tests",
      mf = { 
        "genstubs genstubs",
        "fail_user_created_orb",
        "connect_host_port_connect_to_wrong_host_and_port",
        "get_offer",
        "single_signon",
        "register_service",
        "connect_host_port_connect_to_right_host_and_port",
        "connect_host_port_connect_to_wrong_host_and_port",
        "connect_host_port_connect_with_empty_host",
--        "connect_orb_connect_getting_orb_with_ORB_init",
        "connect_orb_connect_getting_orb_with_createORB",
        "connection_login_login_info_after_login",
        "connection_loginByCertificate_entity_id_and_file_private_key_ok",
        "connection_loginByPassword_after_logout",
        "connection_loginByPassword_entity_id_and_password_ok",
        "connection_loginByPassword_login_when_already_logged",
        "connection_loginByPassword_wrong_password",
        "connection_manager_create_connection_to_invalid_host",
        "connection_manager_create_connection_to_accessible_bus",
        "connection_manager_create_connection_to_inaccessible_bus",
        "connection_manager_get_manager",
        "connection_manager_calls_with_default_connection",
        "connection_manager_calls_with_dispatcher",
        "connection_manager_calls_with_thread_requester",
        "connection_manager_receive_call_with_default_connection",
        "connection_caller_chain_receive_call_with_default_connection_get_caller_chain",
      },
    },
    install_files = {
      ["../tests/bin/"..TEC_UNAME.."/*"] = "test/sdkcpp/",
      ["../tests/runtests.mak"] = "test/sdkcpp/",
    },
  },
  { name = "openbus-sdkcpp-test-micosinglethread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/tests",
      mf = { 
        "genstubs genstubs DBG=Yes",
        "fail_user_created_orb DBG=Yes",
        "connect_host_port_connect_to_wrong_host_and_port DBG=Yes",
        "get_offer DBG=Yes",
        "single_signon DBG=Yes",
        "register_service DBG=Yes",
        "connect_host_port_connect_to_right_host_and_port DBG=Yes",
        "connect_host_port_connect_to_wrong_host_and_port DBG=Yes",
        "connect_host_port_connect_with_empty_host DBG=Yes",
--        "connect_orb_connect_getting_orb_with_ORB_init DBG=Yes",
        "connect_orb_connect_getting_orb_with_createORB DBG=Yes",
        "connection_login_login_info_after_login DBG=Yes",
        "connection_loginByCertificate_entity_id_and_file_private_key_ok DBG=Yes",
        "connection_loginByPassword_after_logout DBG=Yes",
        "connection_loginByPassword_entity_id_and_password_ok DBG=Yes",
        "connection_loginByPassword_login_when_already_logged DBG=Yes",
        "connection_loginByPassword_wrong_password DBG=Yes",
        "connection_manager_create_connection_to_invalid_host DBG=Yes",
        "connection_manager_create_connection_to_accessible_bus DBG=Yes",
        "connection_manager_create_connection_to_inaccessible_bus DBG=Yes",
        "connection_manager_get_manager DBG=Yes",
        "connection_manager_calls_with_default_connection DBG=Yes",
        "connection_manager_calls_with_dispatcher DBG=Yes",
        "connection_manager_calls_with_thread_requester DBG=Yes",
        "connection_manager_receive_call_with_default_connection DBG=Yes",
        "connection_caller_chain_receive_call_with_default_connection_get_caller_chain DBG=Yes",
      },
    },
    install_files = {
      ["../tests/bin/"..TEC_UNAME.."/*"] = "test/sdkcpp/",
      ["../tests/runtests.mak"] = "test/sdkcpp/",
    },
  },
  { name = "openbus-sdkcpp-test-micomultithread",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/tests",
      mf = { 
        "genstubs genstubs OPENBUS_SDK_MULTITHREAD=Yes",
        "fail_user_created_orb OPENBUS_SDK_MULTITHREAD=Yes",
        "connect_host_port_connect_to_wrong_host_and_port OPENBUS_SDK_MULTITHREAD=Yes",
        "get_offer OPENBUS_SDK_MULTITHREAD=Yes",
        "single_signon OPENBUS_SDK_MULTITHREAD=Yes",
        "register_service OPENBUS_SDK_MULTITHREAD=Yes",
        "connect_host_port_connect_to_right_host_and_port OPENBUS_SDK_MULTITHREAD=Yes",
        "connect_host_port_connect_to_wrong_host_and_port OPENBUS_SDK_MULTITHREAD=Yes",
        "connect_host_port_connect_with_empty_host OPENBUS_SDK_MULTITHREAD=Yes",
--        "connect_orb_connect_getting_orb_with_ORB_init OPENBUS_SDK_MULTITHREAD=Yes",
        "connect_orb_connect_getting_orb_with_createORB OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_login_login_info_after_login OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_loginByCertificate_entity_id_and_file_private_key_ok OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_loginByPassword_after_logout OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_loginByPassword_entity_id_and_password_ok OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_loginByPassword_login_when_already_logged OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_loginByPassword_wrong_password OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_manager_create_connection_to_invalid_host OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_manager_create_connection_to_accessible_bus OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_manager_create_connection_to_inaccessible_bus OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_manager_get_manager OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_manager_calls_with_default_connection OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_manager_calls_with_dispatcher OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_manager_calls_with_thread_requester OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_manager_receive_call_with_default_connection OPENBUS_SDK_MULTITHREAD=Yes",
        "connection_caller_chain_receive_call_with_default_connection_get_caller_chain OPENBUS_SDK_MULTITHREAD=Yes",
      },
    },
    install_files = {
      ["../tests/bin/"..TEC_UNAME.."/*"] = "test/sdkcpp/",
      ["../tests/runtests.mak"] = "test/sdkcpp/",
    },
  },
  { name = "openbus-sdkcpp-test-micomultithread-debug",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/tests",
      mf = { 
        "genstubs genstubs OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "fail_user_created_orb OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connect_host_port_connect_to_wrong_host_and_port OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "get_offer OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "single_signon OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "register_service OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connect_host_port_connect_to_right_host_and_port OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connect_host_port_connect_to_wrong_host_and_port OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connect_host_port_connect_with_empty_host OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
--        "connect_orb_connect_getting_orb_with_ORB_init OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connect_orb_connect_getting_orb_with_createORB OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_login_login_info_after_login OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_loginByCertificate_entity_id_and_file_private_key_ok OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_loginByPassword_after_logout OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_loginByPassword_entity_id_and_password_ok OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_loginByPassword_login_when_already_logged OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_loginByPassword_wrong_password OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_manager_create_connection_to_invalid_host OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_manager_create_connection_to_accessible_bus OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_manager_create_connection_to_inaccessible_bus OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_manager_get_manager OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_manager_calls_with_default_connection OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_manager_calls_with_dispatcher OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_manager_calls_with_thread_requester OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_manager_receive_call_with_default_connection OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
        "connection_caller_chain_receive_call_with_default_connection_get_caller_chain OPENBUS_SDK_MULTITHREAD=Yes DBG=Yes",
      },
    },
    install_files = {
      ["../tests/bin/"..TEC_UNAME.."/*"] = "test/sdkcpp",
      ["../tests/runtests.mak"] = "test/sdkcpp/",
      ["../tests/admin/*"] = "test/sdkcpp/admin",
    },
  },
  { name = "openbus-sdkcpp-run-tests",
    build = {
      type = "tecmake",
      src = INSTALL.TOP.."/test/sdkcpp",
      mf = { 
        "runtests run",
      },
    },
  },
  -- Java related packages  
  { name = "scsidl-java",
    build = {
      type = "maven",
      src = PRODAPP .."/scs-idl",
    },
    install_files = {
      ["target/*.jar"] = "lib",
      ["target/dependency/*.jar"] = "lib",
    },
  },
  { name = "scs-java",
    url = SVNREPURL .. "/scs/core/java/trunk",
    directory = PRODAPP .."/scs-java",
    build = {
      type = "maven",
      src = PRODAPP .."/scs-java",
    },
    install_files = {
      ["target/*.jar"] = "lib",
      ["target/dependency/*.jar"] = "lib",
    },
  },
  { name = "openbusapi-java",
    build = {
      type = "maven",
      src = PRODAPP .."/sdk-java",   
    },
    install_files = {
      ["core/target/openbus*.jar"] = "lib",
      ["core/target/dependency/*.jar"] = "lib",
      ["demo/hello/target/openbus-sdk-demo-hello-*.jar"] = "demo/java/hello",
      ["demo/hello/target/dependency/*.jar"] = "lib",
      ["demo/delegation/target/openbus-sdk-demo-delegation-*.jar"] = "demo/java/delegation",
      ["demo/delegation/target/dependency/*.jar"] = "lib",
      ["demo/singlesignon/target/openbus-sdk-demo-singlesignon-*.jar"] = "demo/java/singlesignon",
      ["demo/singlesignon/target/dependency/*.jar"] = "lib",
      ["demo/multiplexing/target/openbus-sdk-demo-multiplexing-*.jar"] = "demo/java/multiplexing",
      ["demo/multiplexing/target/dependency/*.jar"] = "lib",
    },
    dev_files = {
      ["demo/hello/target/openbus-sdk-demo-hello-*.jar"] = "demo/java/hello",
      ["demo/hello/target/dependency/*.jar"] = "lib",
      ["demo/hello/resources"] = "demo/java/hello",
      ["demo/hello/src"] = "demo/java/hello",
      ["demo/hello/idl"] = "demo/java/hello",
      ["demo/hello/management"] = "demo/java/hello",
      ["demo/delegation/target/openbus-sdk-demo-delegation-*.jar"] = "demo/java/delegation",
      ["demo/delegation/target/dependency/*.jar"] = "lib",
      ["demo/delegation/resources"] = "demo/java/delegation",
      ["demo/delegation/src"] = "demo/java/delegation",
      ["demo/delegation/idl"] = "demo/java/delegation",
      ["demo/delegation/management"] = "demo/java/delegation",
      ["demo/singlesignon/target/openbus-sdk-demo-singlesignon-*.jar"] = "demo/java/singlesignon",
      ["demo/singlesignon/target/dependency/*.jar"] = "lib",
      ["demo/singlesignon/resources"] = "demo/java/singlesignon",
      ["demo/singlesignon/src"] = "demo/java/singlesignon",
      ["demo/singlesignon/idl"] = "demo/java/singlesignon",
      ["demo/singlesignon/management"] = "demo/java/singlesignon",
      ["demo/multiplexing/target/openbus-sdk-demo-multiplexing-*.jar"] = "demo/java/multiplexing",
      ["demo/multiplexing/target/dependency/*.jar"] = "lib",
      ["demo/multiplexing/resources"] = "demo/java/multiplexing",
      ["demo/multiplexing/src"] = "demo/java/multiplexing",
      ["demo/multiplexing/idl"] = "demo/java/multiplexing",
      ["demo/multiplexing/management"] = "demo/java/multiplexing",
    },
  },
  { name = "openbusapi-java-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/sdk-java/core",
      cmd = "mvn",
      rebuild = "clean",
      arguments = "javadoc:javadoc -Dquiet",
    },
    install_files = {
      ["target/site/apidocs"] = "doc",
    },
  },
--  { name = "ldap-Linux26g4",
--    src = "/",
--    mf = { },
--    install_files = {
--      ["/usr/lib/libldap.so.2"] = "libpath/${TEC_UNAME}/",
--    },
--    dev_files = {
--      ["/usr/include/ldap.h"] = "incpath/ldap/",
--    },
--  },
}
-- temporary hack! em breve vou renomear definitivamente a tabela packages e
-- ela vai ficar incompativel com versoes antigas do 'tools.compile'
descriptors = packages
