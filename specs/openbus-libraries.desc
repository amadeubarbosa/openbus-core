-- Description of tecmake oriented software, typical tecgraf programs that need
-- tecmake and tecgraf variables to be compiled. Some dummy packages could
-- also use it, like packages that just need to copy files and make links.
-- ATTENTION: place the fundamental packages first!
-- If A depends on B then you should place B's description before than A's.
SUNOS64_TECMAKE_FLAGS="USE_NODEPEND=Yes TEC_UNAME=SunOS510_64 BUILD_64=yes"

IDL_VERSION="v1_05"
IDL_PREV="v1_04"

packages = {
  -- package to download the sources of the oil05, scs and friend projects
  { name = "oil-source",
    url = SVNREPURL .. "/openbus/libs/branches/OB_LIBS_v1_03_2011_07_28/oil-0.5.0",
    directory = PRODAPP .."/oil-0.5.0", 
  },
  { name = "idl-source",
    url = SVNREPURL .. "/openbus/idl/branches/OB_IDL_v1_05_2010_05_13",
    directory = PRODAPP .."/idl",
    install_files = {
      ["src/*.idl"] = "idl/"..IDL_VERSION,
    },
  },
  { name = "idl-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/idl/docs",
      cmd = "doxygen",
      arguments = "openbus.dox"
    },
    install_files = {
      ["html"] = "doc/openbus_"..IDL_VERSION,
    },
  },
  { name = "idl-prev-source",
    url = SVNREPURL .. "/openbus/tags/OB_v1_04_07_2010_11_11/core/idl",
    directory = PRODAPP .."/idl-prev",
    install_files = {
      ["*.idl"] = "idl/"..IDL_PREV,
    },
  },--[[
  { name = "idl-prev-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/idl-prev/docs",
      cmd = "doxygen",
      arguments = "openbus.dox"
    },
    install_files = {
      ["html"] = "doc/openbus_"..IDL_PREV,
    },
  },--]]
  { name = "sdk-java-source",
    url = SVNREPURL .. "/openbus/sdk/java/branches/OB_SDK_JAVA_v1_05_02_2011_07_28",
    directory = PRODAPP .."/sdk-java",
  },
  { name = "sdk-lua-source",
    url = SVNREPURL .. "/openbus/sdk/lua/branches/OB_SDK_LUA_v1_05_03_2011_07_28",
    directory = PRODAPP .."/sdk-lua",
  },
  { name = "sdk-cpp-source",
    url = SVNREPURL .. "/openbus/sdk/cpp/branches/OB_SDK_CPP_v1_05_04_2011_07_29",
    directory = PRODAPP .."/sdk-cpp",
  },
  { name = "openbus-source",
    url = SVNREPURL .. "/openbus/branches/OB_v1_05_03_2011_07_28",
    directory = SVNDIR, -- main source directory for PUts!
                        -- other sources have to be in PRODAPP/something
  },
  { name = "licenses",
    install_files = {
    [SVNDIR.."/LICENSE"] = ".",
    [SVNDIR.."/README"]  = ".",
    },
  },
  { name = "auxiliar-files",
    install_files = {
      [SVNDIR.."/specs/shell/openssl-generate.ksh"] = "bin",
    },
  },
  { name = "lua5.1",
    url = SVNREPURL .. "/openbus/libs/branches/OB_LIBS_v1_03_2011_07_28/lua5.1.3",
    build = {
      type = "tecmake",
      src = PRODAPP .."/lua5.1/src",
      mf = { "config" },
      Darwin = { mf = {"config", "config BUILD_DYLIB=Yes"} },
      SunOS510_64 = { mf = { "config ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblua5.1.so"] = "lib",
      ["../lib/${TEC_UNAME}/liblua5.1.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liblua5.1.*"] = "lib",
      ["../include/*"] = "include/lua5.1.3",
    },
  },
  { name = "lua5.1-bin",
    build = {
      type = "tecmake",
      src = PRODAPP .."/lua5.1/src",
      mf = { "lua", --[["luac", "bin2c",]] },
      SunOS510_64 = { mf = {"lua ".. SUNOS64_TECMAKE_FLAGS} },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/lua5.1"] = "bin",
    },
  },
  { name = "tolua5.1",
    url = SVNREPURL .. "/openbus/libs/branches/OB_LIBS_v1_03_2011_07_28/tolua5.1",
    build = {
      type = "tecmake",
      src = PRODAPP .."/tolua5.1/src",
      mf = { "tolua5lib LUA51=../../lua5.1", "tolua5 LUA51=../../lua5.1" },
    Darwin = { mf = {"tolua5lib LUA51="..PRODAPP.."/lua5.1", "tolua5lib BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1", "tolua5 LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "tolua5lib LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS, "tolua5 LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    dev_files = {
      ["../bin/${TEC_UNAME}/tolua5.1"] = "bin",
      ["../lib/${TEC_UNAME}/libtolua5.1.*"] = "lib",
      ["../include/tolua.h"] = "include/tolua5.1",
    },
  },
  { name = "luafilesystem",
    url = SVNREPURL .. "/openbus/libs/branches/OB_LIBS_v1_03_2011_07_28/luafilesystem-1.4.2/",
    build = {
      type = "tecmake",
      src = PRODAPP .."/luafilesystem/src",
      mf = { "config LUA51=../../lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblfs.so"] = "lib",
      ["../lib/${TEC_UNAME}/liblfs.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liblfs.*"] = "lib",
      ["../include/*"] = "include/luafilesystem",
    },
  },
  { name = "luasocket2",
    url = SVNREPURL .. "/openbus/libs/branches/OB_LIBS_v1_03_2011_07_28/luasocket2",
    build = {
      type = "tecmake",
      src = PRODAPP .."/luasocket2/src",
      mf = { "config LUA51=../../lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libluasocket.so"] = "lib",
      ["../lib/${TEC_UNAME}/libluasocket.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libluasocket.*"] = "lib",
      ["luasocket.h"] = "include/luasocket2",
    },
  },
  { name = "oilall",
    build = {
      type = "tecmake",
      src = PRODAPP .."/oil-0.5.0/src",
      mf = { "oilall LUA51=../../lua5.1", },
    Darwin = { mf = {"oilall LUA51="..PRODAPP.."/lua5.1", "oilall BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "oilall LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liboilall.so"] = "lib",
      ["../lib/${TEC_UNAME}/liboilall.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liboilall.*"] = "lib",
      ["oilall.h"] = "include/oil-0.5.0",
    },
    symbolic_links = {
      ["liboilall.so"] = "lib/libluaoil.so",
      ["libluaoil.so"] = "lib/liblualuaidl.so",
      ["liblualuaidl.so"] = "lib/liblualoop.so",
    },
  },
  { name = "luuid",
    url = SVNREPURL .. "/openbus/libs/branches/OB_LIBS_v1_03_2011_07_28/luuid",
    build = {
      type = "tecmake",
      src = PRODAPP .."/luuid/src",
      mf = { "config LUA51=../../lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libluuid.so"] = "lib",
      ["../lib/${TEC_UNAME}/libluuid.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libluuid.*"] = "lib",
      ["../include/*"] = "include/luuid",
    },
  },
  { name = "lualdap-1.0.1",
    url = SVNREPURL .. "/openbus/libs/branches/OB_LIBS_v1_03_2011_07_28/lualdap-1.0.1",
    build = {
      type = "tecmake",
      src = PRODAPP .."/lualdap-1.0.1/src",
      mf = { "config LUA51=../../lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblualdap.so"] = "lib",
      ["../lib/${TEC_UNAME}/liblualdap.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/liblualdap.*"] = "lib",
      ["../include/*"] = "include/lualdap-1.0.1",
    },
  },
  { name = "latt",
    url = SVNREPURL.."/luautils/latt/tags/v1_00_01_2011_07_12",
    build = {
      type = "tecmake",
      src = PRODAPP .."/latt",
      mf = { },
    },
    dev_files = {
      ["lua/*"] = "lib/lua/5.1"
    },
  },
  -- FIXME: precompiler.lua precisa do loop!
  { name = "loop",
    build = {
      type = "tecmake",
      src = PRODAPP .."/oil-0.5.0",
      mf = { },
    },
    dev_files = {
      ["lua/loop"] = "lib/lua/5.1",
      ["lua/precompiler.lua"] = "lib/lua/5.1",
      ["lua/preloader.lua"] = "lib/lua/5.1",
    },
  },
  { name = "scs-idl-prev",
    url = SVNREPURL .. "/scs/tags/SCS_v1_00_02_2010_04_12/idl",
    directory = PRODAPP .."/scs-idl-prev",
    install_files = {
      ["scs.idl"] = "idl/"..IDL_PREV,
    },
  },
  { name = "scs-idl",
    url = SVNREPURL .. "/scs/core/idl/branches/SCS_CORE_IDL_v1_02_2010_09_21",
    directory = PRODAPP .."/scs-idl",
    install_files = {
      ["src/scs.idl"] = "idl/"..IDL_VERSION,
    },
  },
  { name = "scs-idl-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/scs-idl/docs",
      cmd = "doxygen",
      arguments = "scs.dox"
    },
    install_files = {
      ["html"] = "doc/scs",
    },
  },
  { name = "scsall",
    url = SVNREPURL .. "/scs/core/lua/branches/SCS_CORE_LUA_v1_02_02_2011_07_28",
    directory = PRODAPP .."/scs-lua",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-lua/src",
      mf = { "scsall LOOP_HOME="..INSTALL.TOP.."/lib/lua/5.1 LUA51="..PRODAPP.."/lua5.1", },
    Darwin = { mf = {"scsall LOOP_HOME="..INSTALL.TOP.."/lib/lua/5.1 LUA51="..PRODAPP.."/lua5.1", "scsall LOOP_HOME="..INSTALL.TOP.."/lib/lua/5.1 LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes"} },
      SunOS510_64 = { mf = { "scsall LOOP_HOME="..INSTALL.TOP.."/lib/lua/5.1 LUA51="..PRODAPP.."/lua5.1 "..SUNOS64_TECMAKE_FLAGS, } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libscsall.so"] = "lib",
      ["../lib/${TEC_UNAME}/libscsall.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libscsall.*"] = "lib",
      ["../obj/${TEC_UNAME}/scsall.h"] = "include/scs",
      ["../schema"] = "schema",
    },
    symbolic_links = {
      ["libscsall.so"] = "lib/libluascs.so",
    },
  },
  { name = "scsoil",
    url = SVNREPURL .. "/scs/core/cppoil/trunk",
    directory = PRODAPP .."/scs-cppoil",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-cppoil/src",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", },
      Darwin = { mf = {
        "config LUA51="..PRODAPP.."/lua5.1",
        "config LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=Yes"}, },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/libscsoil.so"] = "lib",
      ["../lib/${TEC_UNAME}/libscsoil.dylib"] = "lib",
    },
    dev_files = {
      ["../lib/${TEC_UNAME}/libscsoil.*"] = "lib",
      ["*.h"] = "include/scs/cppoil/",
      ["luaidl/*.h"] = "include/scs/cppoil/luaidl/",
    },
  },
  { name = "luatrace",
    url = SVNREPURL .. "/openbus/libs/branches/OB_LIBS_v1_03_2011_07_28/luatrace",
    build = {
      type = "command",
      src = PRODAPP .."/luatrace",
      Linux = { cmd = "make PLAT=linux reader static-writer dynamic-writer "..
         "&& make PLAT=linux INSTALL_TOP=" .. TMPDIR  ..
         " install-reader install-static-writer install-dynamic-writer",
      },
    },
    install_files = {
        [TMPDIR .. "/bin/luatrace"]                       = "bin",
        [TMPDIR .. "/lib/libluatrace_*.so"]               = "lib",
        [TMPDIR .. "/lib/lua/5.1/trace/*.so"]             = "lib/trace",
        [TMPDIR .. "/lib/lua/5.1/trace/inputstream/*.so"] = "lib/trace/inputstream",
        [TMPDIR .. "/lib/lua/5.1/trace/msgdecoder/*.so"]  = "lib/trace/msgdecoder",
        [TMPDIR .. "/lib/lua/5.1/trace/msgreader/*.so"]   = "lib/trace/msgreader",
        [TMPDIR .. "/share/lua/5.1/trace/manager.lua"]    = "lib/lua/5.1/trace",
    },
  },
  { name = "lce",
    url = SVNREPURL.."/luautils/lce/branches/v1_00_2011_03_01",
    build = {
      type = "tecmake",
      src = PRODAPP.."/lce/src",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblce*.so"] = "lib",
      ["../lib/${TEC_UNAME}/liblce*.dylib"] = "lib",
    },
    dev_files = {
      ["../include/*"] = "include/lce/",
      ["../lib/${TEC_UNAME}/liblce.*"] = "lib",
    },
  },
  { name = "lpw",
    build = {
      type = "tecmake",
      src = SVNDIR .."/lib/lpw/src",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", },
    Darwin = { mf = {"config LUA51="..PRODAPP.."/lua5.1", "config BUILD_DYLIB=Yes LUA51="..PRODAPP.."/lua5.1"} },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../lib/${TEC_UNAME}/liblpw.so"] = "lib",
      ["../lib/${TEC_UNAME}/liblpw.dylib"] = "lib",
    },
    dev_files = {
      ["lpw.h"] = "include/lpw/",
      ["../lib/${TEC_UNAME}/liblpw.*"] = "lib",
    },
  },
  { name = "openbus-lua",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-lua",
      mf = { "config LUA51="..PRODAPP.."/lua5.1" },
      Darwin = { mf = { "config LUA51="..PRODAPP.."/lua5.1","config LUA51="..PRODAPP.."/lua5.1 BUILD_DYLIB=YES" }, },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["lib/${TEC_UNAME}/libluaopenbus.so"] = "lib",
      ["lib/${TEC_UNAME}/libluaopenbus.dylib"] = "lib",
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libluaopenbus.*"] = "lib",
      ["obj/${TEC_UNAME}/openbus.h"] = "include/openbus/lua/",
    },
  },
  -- FIXME: esse pacote deve ser removido quando concluir OPENBUS-1372
  { name = "openbus-lua-extras",
    url = SVNREPURL .. "/openbus/branches/OB_v1_05_03_2011_07_28/data",
    directory = SVNDIR .. "/data", -- main source directory for PUts!
    install_files = {
      ["conf/config"] = "data/conf",
      ["conf/ACSFaultToleranceConfiguration.lua"] = "data/conf",
      ["conf/RSFaultToleranceConfiguration.lua"] = "data/conf",
      ["conf/FTTimeOutConfiguration.lua"] = "data/conf",
      ["conf/advanced/InterceptorsConfiguration.lua"] = "data/conf/advanced",
    },
  },
  { name = "openbus-core",
    build = {
      type = "tecmake",
      src = SVNDIR .."/core/services",
      mf = { "config LUA51="..PRODAPP.."/lua5.1", },
      SunOS510_64 = { mf = { "config LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
      --env LFLAGS="-undefined dynamic_lookup"
    },
    install_files = {
      ["../bin/${TEC_UNAME}/servicelauncher.bin"] = "bin",
      ["../bin/*.sh"] = "bin",
      ["../bin/servicelauncher"] = "bin",
      ["../services/accesscontrol"] = "src/lua/openbus/core/services",
      ["../services/registry"] = "src/lua/openbus/core/services",
      ["../services/faulttolerance"] = "src/lua/openbus/core/services",
      ["../services/session"] = "src/lua/openbus/core/services",
      ["../management/*"] = "src/lua/openbus/core/management",
      ["../../specs/management"] = "specs",
      ["../../specs/shell"] = "specs",
      ["../../specs/templates"] = "specs",
      ["../test/run_check_install.sh"] = "test",
      ["../test/checkInstall.lua"] = "test",
    },
    conf_files = {
      ["../../data/conf"] = "data",
    },
    -- TODO: include here all templates/openbus.lua messages table!!
    conf_template = {
      SVNDIR .."/specs/templates/openbus.lua",
    },
    dev_files = {
      ["../test/*"] = "test",
    },
  },
  { name = "openbus-bin-acs",
    build = {
      type = "tecmake",
      src = SVNDIR .."/core/services",
      mf = { "accesscontrol LUA51="..PRODAPP.."/lua5.1", },
      SunOS510_64 = { mf = { "accesscontrol LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/acs.bin"] = "bin",
      ["../bin/run_binary_acs.sh"] = "bin",
    },
  },
  { name = "openbus-bin-rgs",
    build = {
      type = "tecmake",
      src = SVNDIR .."/core/services",
      mf = { "registry LUA51="..PRODAPP.."/lua5.1", },
      SunOS510_64 = { mf = { "registry LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/rgs.bin"] = "bin",
      ["../bin/run_binary_rgs.sh"] = "bin",
    },
  },
  { name = "openbus-bin-ss",
    build = {
      type = "tecmake",
      src = SVNDIR .."/core/services",
      mf = { "session LUA51="..PRODAPP.."/lua5.1", },
      SunOS510_64 = { mf = { "session LUA51="..PRODAPP.."/lua5.1 ".. SUNOS64_TECMAKE_FLAGS } },
    },
    install_files = {
      ["../bin/${TEC_UNAME}/ss.bin"] = "bin",
      ["../bin/run_binary_ss.sh"] = "bin",
    },
  },
  { name = "openbus-demo-hello-lua",
    directory = PRODAPP .."/sdk-lua/demo/hello",
    dev_files = {
      ["client.lua"] = "demo/lua/hello",
      ["server.lua"] = "demo/lua/hello",
      ["run"] = "demo/lua/hello",
      ["Hello.properties"] = "demo/lua/hello",
      ["idl"] = "demo/lua/hello",
      ["management"] = "demo/lua/hello",
    },
  },
  { name = "openbus-demo-eventsink-lua",
    directory = PRODAPP .."/sdk-lua/demo/eventSink",
    dev_files = {
      ["client.lua"] = "demo/lua/eventSink",
      ["client.sh"] = "demo/lua/eventSink",
      ["server.lua"] = "demo/lua/eventSink",
      ["server.sh"] = "demo/lua/eventSink",
      ["EventSink.properties"] = "demo/lua/eventSink",
      ["management"] = "demo/lua/eventSink",
    },
  },
  { name = "openbus-demo-delegate-lua",
    directory = PRODAPP .."/sdk-lua/demo/delegate",
    dev_files = {
      ["client.lua"] = "demo/lua/delegate",
      ["server.lua"] = "demo/lua/delegate",
      ["run"] = "demo/lua/delegate",
      ["Delegate.properties"] = "demo/lua/delegate",
      ["idl"] = "demo/lua/delegate",
      ["management"] = "demo/lua/delegate",
    },
  },
   -- Orbix related packages
  { name = "scs-orbix",
    url = SVNREPURL .. "/scs/core/cpp/branches/SCS_CORE_CPP_v1_02_00_2011_07_29",
    directory = PRODAPP .."/scs-cpp",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-cpp",
      mf = { "orbix genstubs", "orbix" },
    },
    install_files = {
      ["lib/${TEC_UNAME}/libscsorbix.so"] = "libpath/${TEC_UNAME}",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idlpath/"..IDL_VERSION.."/scs.idl"] =
          "idlpath/"..IDL_VERSION,
      ["shell/orbix/idl"] = "specs/shell/orbix",        
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libscsorbix.*"] = "libpath/${TEC_UNAME}",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idlpath/"..IDL_VERSION.."/scs.idl"] =
          "idlpath/"..IDL_VERSION,
      ["include/scs/*"] = "incpath/scs/",
    },
  },
  { name = "openbus-orbix",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp",
      mf = { "orbix precompile LUA51="..PRODAPP.."/lua5.1", "orbix genstubs", "orbix LUA51="..PRODAPP.."/lua5.1" },
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libopenbusorbix.*"] = "libpath/${TEC_UNAME}",
      ["*.h"] = "incpath/openbus/cpp", --include
      ["openbus/util/*.h"] = "incpath/openbus/cpp/openbus/util/",    --include
      ["openbus/interceptors/*.h"] = "incpath/openbus/cpp/openbus/interceptors/",    --include
      ["stubs/orbix"] = "incpath/openbus/cpp/stubs",     --include
      [INSTALL.TOP.."/idlpath/"..IDL_VERSION.."/*"] = "idlpath/"..IDL_VERSION,
      ["test/orbix/acs/*.cpp"] = "test/orbix/acs/",
      ["test/orbix/acs/config.mak"] = "test/orbix/acs/",
      ["test/orbix/rgs/*.cpp"] = "test/orbix/rgs/",
      ["test/orbix/rgs/config.mak"] = "test/orbix/rgs/",
      ["test/orbix/config*"] = "test/orbix/",
      ["test/orbix/runtests"] = "test/orbix/",
      ["shell/orbix/idl"] = "specs/shell/orbix",        
    },
  },
  { name = "openbus-test-orbix",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/test/orbix",
      mf = { 
        "config cxxtest -C acs", 
        "config -C acs LUA51="..PRODAPP.."/lua5.1", 
        "config cxxtest -C rgs",  
        "config genstubs -C rgs", 
        "config -C rgs LUA51="..PRODAPP.."/lua5.1" 
      },
    },
    install_files = {
      ["bin/${TEC_UNAME}/*"] = "test/orbix/bin/${TEC_UNAME}",
      ["config*"] = "test/orbix/",
      ["runtests"] = "test/orbix/",
    },
  },
  { name = "openbus-orbix-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/sdk-cpp",
      cmd = "doxygen",
      arguments = "doxygen.cfg"
    },
    install_files = {
      ["docs/html"] = "docs/cpp/",
    },
  },
  { name = "openbus-demo-hello-orbix",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/hello/orbix",
      mf = { "server genstubs USE_NODEPEND=Yes", 
             "client LUA51="..PRODAPP.."/lua5.1", 
             "server LUA51="..PRODAPP.."/lua5.1" },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/hello/orbix/bin/${TEC_UNAME}",
      ["../idl/hello.idl"] = "demo/hello/idl/",
      ["../management"] = "demo/hello",
      ["../../README"] = "demo",      
      ["Makefile"] = "demo/hello/orbix",
      ["client.cpp"] = "demo/hello/orbix",
      ["server.cpp"] = "demo/hello/orbix",
      ["run*"] = "demo/hello/orbix",
      ["*.mak"] = "demo/hello/orbix",
      ["*config"] = "demo/hello/orbix",
      ["run*"] = "demo/hello/orbix",
      ["client"] = "demo/hello/orbix",
      ["server"] = "demo/hello/orbix",
      [SVNDIR.."/specs/shell/*rc"] = "specs/shell/", -- shell variables
      [SVNDIR.."/specs/shell/sample-domain_env.*"] = "specs/shell/",
    },
  },
  { name = "openbus-demo-delegate-orbix",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/delegate/singlethread/orbix",
      mf = { 
        "server genstubs", 
        "client LUA51="..PRODAPP.."/lua5.1",
        "server LUA51="..PRODAPP.."/lua5.1" 
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/delegate/singlethread/orbix/bin/${TEC_UNAME}",
      ["../../idl/delegate.idl"] = "demo/delegate/singlethread/idl/",
      ["../../management"] = "demo/delegate/singlethread",
      ["client.cpp"] = "demo/delegate/singlethread/orbix",
      ["server.cpp"] = "demo/delegate/singlethread/orbix",
      ["run*"] = "demo/delegate/singlethread/orbix",
      ["*.mak"] = "demo/delegate/singlethread/orbix",
      ["*config"] = "demo/delegate/singlethread/orbix",
      ["run*"] = "demo/delegate/singlethread/orbix",
      ["client"] = "demo/delegate/singlethread/orbix",
      ["server"] = "demo/delegate/singlethread/orbix",
      [SVNDIR.."/specs/shell/*rc"] = "specs/shell/", -- shell variables
      [SVNDIR.."/specs/shell/sample-domain_env.*"] = "specs/shell/",
    },
  },
  -- MICO related packages
  { name = "scs-micoMT",
    url = SVNREPURL .. "/scs/core/cpp/branches/SCS_CORE_CPP_v1_02_00_2011_07_29",
    directory = PRODAPP .."/scs-cpp",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-cpp",
      mf = { 
        "mico genstubs MULTITHREAD=Yes", 
        "mico LUA51="..PRODAPP.."/lua5.1 MULTITHREAD=Yes" 
      },
      Darwin = {
        mf = { 
          "mico genstubs LD=g++ MULTITHREAD=Yes", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1 MULTITHREAD=Yes" 
        },
      },
    },
    install_files = {
      ["lib/${TEC_UNAME}/libscsmicoMT.*"] = "libpath/${TEC_UNAME}",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idlpath/"..IDL_VERSION.."/scs.idl"] =
          "idlpath/"..IDL_VERSION,
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libscsmicoMT.*"] = "libpath/${TEC_UNAME}",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idlpath/"..IDL_VERSION.."/scs.idl"] =
          "idlpath/"..IDL_VERSION,
      ["include/scs/*"] = "incpath/scs",
    },
  },
  { name = "scs-micoST",
    url = SVNREPURL .. "/scs/core/cpp/branches/SCS_CORE_CPP_v1_02_00_2011_07_29",
    directory = PRODAPP .."/scs-cpp",
    build = {
      type = "tecmake",
      src = PRODAPP .."/scs-cpp",
      mf = { 
        "mico genstubs", 
        "mico LUA51="..PRODAPP.."/lua5.1"
      },
      Darwin = {
        mf = { 
          "mico genstubs LD=g++", 
          "mico BUILD_DYLIB=Yes LD=g++ LUA51="..PRODAPP.."/lua5.1" 
        },
      },
    },
    install_files = {
      ["lib/${TEC_UNAME}/libscsmicoST.*"] = "libpath/${TEC_UNAME}",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idlpath/"..IDL_VERSION.."/scs.idl"] =
          "idlpath/"..IDL_VERSION,
    },
    dev_files = {
      ["lib/${TEC_UNAME}/libscsmicoST.*"] = "libpath/${TEC_UNAME}",
      -- to make sure that .idl files will be in the .tar.gz package
      [INSTALL.TOP.."/idlpath/"..IDL_VERSION.."/scs.idl"] =
          "idlpath/"..IDL_VERSION,
      ["include/scs/*"] = "incpath/scs",
    },
  },
  { name = "openbus-micoMT",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp",
      mf = { 
        "mico genstubs MULTITHREAD=Yes", 
        "mico LUA51="..PRODAPP.."/lua5.1 MULTITHREAD=Yes" },
      -- special compile instructions for solaris
      Darwin = {
        mf = { 
          "mico genstubs LD=g++ MULTITHREAD=Yes", 
          "mico LD=g++ LUA51="..PRODAPP.."/lua5.1 MULTITHREAD=Yes" 
        },
      },
    },
    dev_files = {
      ["CHANGES"] = ".",
      ["specs/shell/mico*"] = "specs/shell/",
      ["lib/${TEC_UNAME}/libopenbusmicoMT.*"] = "libpath/${TEC_UNAME}",
      ["*.h"] = "incpath/openbus/cpp", --include
      ["openbus/util/*.h"] = "incpath/openbus/cpp/openbus/util/",    --include
      ["openbus/interceptors/*.h"] = "incpath/openbus/cpp/openbus/interceptors/",    --include
      ["stubs/mico"] = "incpath/openbus/cpp/stubs",     --include
      [INSTALL.TOP.."/idlpath/"..IDL_PREV.."/*"] = "idlpath/"..IDL_PREV,
      ["test/mico/acs/*.cpp"] = "test/mico/acs/",
      ["test/mico/acs/config.mak"] = "test/mico/acs/",
      ["test/mico/rgs/*.cpp"] = "test/mico/rgs/",
      ["test/mico/rgs/config.mak"] = "test/mico/rgs/",
      ["test/mico/config*"] = "test/mico/",
      ["test/mico/runtests"] = "test/mico/",
      [SVNDIR.."/specs/shell/*rc"] = "specs/shell/", -- shell variables
      [SVNDIR.."/specs/shell/mico-setup.*"] = "specs/shell/",
    },
  },
  { name = "openbus-micoST",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp",
      mf = { 
        "mico genstubs", 
        "mico LUA51="..PRODAPP.."/lua5.1" },
      -- special compile instructions for solaris
      Darwin = {
        mf = { 
          "mico genstubs LD=g++", 
          "mico LD=g++ LUA51="..PRODAPP.."/lua5.1" 
        },
      },
    },
    dev_files = {
      ["CHANGES"] = ".",
      ["specs/shell/mico*"] = "specs/shell/",
      ["lib/${TEC_UNAME}/libopenbusmicoST.*"] = "libpath/${TEC_UNAME}",
      ["*.h"] = "incpath/openbus/cpp", --include
      ["openbus/util/*.h"] = "incpath/openbus/cpp/openbus/util/",    --include
      ["openbus/interceptors/*.h"] = "incpath/openbus/cpp/openbus/interceptors/",    --include
      ["stubs/mico"] = "incpath/openbus/cpp/stubs",     --include
      [INSTALL.TOP.."/idlpath/"..IDL_PREV.."/*"] = "idlpath/"..IDL_PREV,
      ["test/mico/acs/*.cpp"] = "test/mico/acs/",
      ["test/mico/acs/config.mak"] = "test/mico/acs/",
      ["test/mico/rgs/*.cpp"] = "test/mico/rgs/",
      ["test/mico/rgs/config.mak"] = "test/mico/rgs/",
      ["test/mico/config*"] = "test/mico/",
      ["test/mico/runtests"] = "test/mico/",
      [SVNDIR.."/specs/shell/*rc"] = "specs/shell/", -- shell variables
      [SVNDIR.."/specs/shell/mico-setup.*"] = "specs/shell/",
    },
  },
  { name = "openbus-demo-hello-micoMT",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/hello/mico",
      mf = { 
        "server genstubs MULTITHREAD=Yes", 
        "client LUA51="..PRODAPP.."/lua5.1 MULTITHREAD=Yes",
        "server LUA51="..PRODAPP.."/lua5.1 MULTITHREAD=Yes" 
      },
      SunOS510 = { 
        mf = { 
          "server genstubs MULTITHREAD=Yes",
          'client "LUA51='..PRODAPP..'/lua5.1 MULTITHREAD=Yes"',
          'server "LUA51='..PRODAPP..'/lua5.1 MULTITHREAD=Yes"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes MULTITHREAD=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes MULTITHREAD=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes MULTITHREAD=Yes"}, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/hello/mico/bin/${TEC_UNAME}",
      ["../idl/hello.idl"] = "demo/hello/idl/",
      ["../management"] = "demo/hello",
      ["../../README"] = "demo",      
      ["Makefile"] = "demo/hello/mico",
      ["Makefile.win"] = "demo/hello/mico",
      ["client.cpp"] = "demo/hello/mico",
      ["server.cpp"] = "demo/hello/mico",
      ["run*"] = "demo/hello/mico",
      ["*.mak"] = "demo/hello/mico",
      ["*config"] = "demo/hello/mico",
      ["run*"] = "demo/hello/mico",
      ["client"] = "demo/hello/mico",
      ["server"] = "demo/hello/mico",
      [SVNDIR.."/specs/shell/mico-setup.*"] = "specs/shell/",
    },
  },
  { name = "openbus-demo-hello-micoST",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/hello/mico",
      mf = { 
        "server genstubs", 
        "client LUA51="..PRODAPP.."/lua5.1",
        "server LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510 = { 
        mf = { 
          "server genstubs ",
          'client "LUA51='..PRODAPP..'/lua5.1"',
          'server "LUA51='..PRODAPP..'/lua5.1"',
        }, 
      },
      SunOS510_64 = { 
        mf = { "server genstubs USE_NODEPEND=Yes", 
               "client LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes", 
               "server LUA51="..PRODAPP.."/lua5.1 USE_NODEPEND=Yes"}, 
      }
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/hello/mico/bin/${TEC_UNAME}",
      ["../idl/hello.idl"] = "demo/hello/idl/",
      ["../management"] = "demo/hello",
      ["../../README"] = "demo",      
      ["Makefile"] = "demo/hello/mico",
      ["Makefile.win"] = "demo/hello/mico",
      ["client.cpp"] = "demo/hello/mico",
      ["server.cpp"] = "demo/hello/mico",
      ["run*"] = "demo/hello/mico",
      ["*.mak"] = "demo/hello/mico",
      ["*config"] = "demo/hello/mico",
      ["run*"] = "demo/hello/mico",
      ["client"] = "demo/hello/mico",
      ["server"] = "demo/hello/mico",
      [SVNDIR.."/specs/shell/mico-setup.*"] = "specs/shell/",
    },
  },
  { name = "openbus-demo-delegate-singlethread-mico",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/delegate/singlethread/mico",
      mf = { 
        "server genstubs", 
        "client LUA51="..PRODAPP.."/lua5.1",
        "server LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510_64 = { 
        mf = { 
          "server genstubs USE_NODEPEND=Yes",
          'client USE_NODEPEND=Yes "LUA51='..PRODAPP..'/lua5.1 "',
          'server USE_NODEPEND=Yes "LUA51='..PRODAPP..'/lua5.1 "',
        }, 
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/delegate/singlethread/mico/bin/${TEC_UNAME}",
      ["../../idl/delegate.idl"] = "demo/delegate/idl/",
      ["../../management"] = "demo/delegate",
      ["../../README"] = "demo",      
      ["Makefile"] = "demo/delegate/singlethread/mico",
      ["client.cpp"] = "demo/delegate/singlethread/mico",
      ["server.cpp"] = "demo/delegate/singlethread/mico",
      ["run*"] = "demo/delegate/singlethread/mico",
      ["*.mak"] = "demo/delegate/singlethread/mico",
      ["*config"] = "demo/delegate/singlethread/mico",
      ["run*"] = "demo/delegate/singlethread/mico",
      ["client"] = "demo/delegate/singlethread/mico",
      ["server"] = "demo/delegate/singlethread/mico",
    },
  },
  { name = "openbus-demo-delegate-multithread-mico",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/demo/delegate/multithread/mico",
      mf = { 
        "server genstubs", 
        "client LUA51="..PRODAPP.."/lua5.1",
        "server LUA51="..PRODAPP.."/lua5.1" 
      },
      SunOS510_64 = { 
        mf = { 
          "server genstubs ",
          'client USE_NODEPEND=Yes "LUA51='..PRODAPP..'/lua5.1 "',
          'server USE_NODEPEND=Yes "LUA51='..PRODAPP..'/lua5.1 "',
        }, 
      },
    },
    dev_files = {
      ["bin/${TEC_UNAME}/*"] = "demo/delegate/multithread/mico/bin/${TEC_UNAME}",
      ["../../idl/delegate.idl"] = "demo/delegate/idl/",
      ["../../management"] = "demo/delegate",
      ["../../README"] = "demo",      
      ["Makefile"] = "demo/delegate/multithread/mico",
      ["client.cpp"] = "demo/delegate/multithread/mico",
      ["server.cpp"] = "demo/delegate/multithread/mico",
      ["run*"] = "demo/delegate/multithread/mico",
      ["*.mak"] = "demo/delegate/multithread/mico",
      ["*config"] = "demo/delegate/multithread/mico",
      ["run*"] = "demo/delegate/multithread/mico",
      ["client"] = "demo/delegate/multithread/mico",
      ["server"] = "demo/delegate/multithread/mico",
    },
  },
  { name = "openbus-test-micoMT",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/test/mico",
      mf = { 
        "config cxxtest -C acs MULTITHREAD=Yes", 
        "config -C acs LUA51="..PRODAPP.."/lua5.1 MULTITHREAD=Yes", 
        "config cxxtest -C rgs MULTITHREAD=Yes", 
        "config genstubs -C rgs MULTITHREAD=Yes", 
        "config -C rgs LUA51="..PRODAPP.."/lua5.1 MULTITHREAD=Yes" 
      },
    },
    install_files = {
      ["bin/${TEC_UNAME}/*"] = "test/mico/bin/${TEC_UNAME}",
      ["config*"] = "test/mico/",
      ["runtests"] = "test/mico/",
      ["../idl/*"] = "test/idl",
    },
  },
  { name = "openbus-test-micoST",
    build = {
      type = "tecmake",
      src = PRODAPP .."/sdk-cpp/test/mico",
      mf = { 
        "config cxxtest -C acs ", 
        "config -C acs LUA51="..PRODAPP.."/lua5.1 ", 
        "config cxxtest -C rgs ", 
        "config genstubs -C rgs ", 
        "config -C rgs LUA51="..PRODAPP.."/lua5.1 " 
      },
    },
    install_files = {
      ["bin/${TEC_UNAME}/*"] = "test/mico/bin/${TEC_UNAME}",
      ["config*"] = "test/mico/",
      ["runtests"] = "test/mico/",
      ["../idl/*"] = "test/idl",
    },
  },
  -- Java related packages  
  { name = "scsidl-java",
    build = {
      type = "maven",
      src = PRODAPP .."/scs-idl",
    },
    install_files = {
      ["target/*.jar"] = "lib",
      ["target/dependency/*.jar"] = "lib",
    },
  },
  { name = "scs-java",
    url = SVNREPURL .. "/scs/core/java/branches/SCS_CORE_JAVA_v1_02_01_2011_07_28",
    directory = PRODAPP .."/scs-java",
    build = {
      type = "maven",
      src = PRODAPP .."/scs-java",
    },
    install_files = {
      ["target/*.jar"] = "lib",
      ["target/dependency/*.jar"] = "lib",
    },
  },
  { name = "openbusapi-java",
    build = {
      type = "maven",
      src = PRODAPP .."/sdk-java",   
    },
    install_files = {
      ["target/openbus*.jar"] = "lib",
      ["target/dependency/*.jar"] = "lib",
      ["demo/hello/target/openbus-demo-hello-*.jar"] = "demo/java/hello",
      ["demo/hello/target/dependency/*.jar"] = "lib",
      ["demo/eventSink/target/openbus-demo-eventsink-*.jar"] = "demo/java/eventSink",
      ["demo/eventSink/target/dependency/*.jar"] = "lib",
    },
    dev_files = {
      ["demo/hello/target/openbus-demo-hello-*.jar"] = "demo/java/hello",
      ["demo/hello/target/dependency/*.jar"] = "lib",
      ["demo/hello/resources"] = "demo/java/hello",
      ["demo/hello/src"] = "demo/java/hello",
      ["demo/hello/idl"] = "demo/java/hello",
      ["demo/hello/management"] = "demo/java/hello",
      ["demo/eventSink/target/openbus-sdk-demo-eventsink-*.jar"] = "demo/java/eventSink",
      ["demo/eventSink/target/dependency/*.jar"] = "lib",
      ["demo/eventSink/resources"] = "demo/java/eventSink",
      ["demo/eventSink/src"] = "demo/java/eventSink",
      ["demo/eventSink/management"] = "demo/java/eventSink",
    },
  },
  { name = "openbusapi-java-doc",
    build = {
      type = "command",
      src = PRODAPP .. "/sdk-java/core",
      cmd = "mvn",
      rebuild = "clean",
      arguments = "javadoc:javadoc -Dquiet",
    },
    install_files = {
      ["target/site/apidocs"] = "doc",
    },
  },
--  { name = "ldap-Linux26g4",
--    src = "/",
--    mf = { },
--    install_files = {
--      ["/usr/lib/libldap.so.2"] = "libpath/${TEC_UNAME}/",
--    },
--    dev_files = {
--      ["/usr/include/ldap.h"] = "incpath/ldap/",
--    },
--  },
}
-- temporary hack! em breve vou renomear definitivamente a tabela packages e
-- ela vai ficar incompativel com versoes antigas do 'tools.compile'
descriptors = packages
