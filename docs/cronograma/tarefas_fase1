
FASE 1: PROTÓTIPO COM SERVIÇO DE PROJETOS
-----------------------------------------

1) INFRAESTRUTURA BÁSICA (dependente, em parte, de recursos externos)
   =====================

  1.1 Implementação do SCS (funcionalidade básica IComponent, IMetaInterface)
      - Java, C++, Lua

    --> Verificar com Renato a alocação de alunos e prazos:
        Rodrigo vai verificar com Maia a compatibilização da nossa implementação
        de SCS Lua com a "oficial"

    --> Previsão é fim de julho

  1.2 Nova implementação do OiL, com suporte a interceptadores

    --> FECHADO. Estamos usando a nova versão

  1.3 Incorporar mecanismo de "verbose" para os serviços em Lua utilizando a 
      infraestrutura provida pelo OiL

    --> FECHADO.

  1.4 Geração de executáveis com bibliotecas estáticas para serviços Lua.

2) DOCUMENTAÇÂO DO PROTÓTIPO (FASE 1)
   ==================================

  2.1 Finalizar Documentação Preliminar (Ana, Cris, Rodrigo)
      - Mecanismos e Serviços Básicos, Serviço de Projetos, Casos de Usos

    --> FECHADO. O documento pode ir sendo atualizada à medida que as
        implementações forem sendo desenvolvidas

  2.2 Complementação da Documentação
      -> várias dependências
   

3) MECANISMOS BÁSICOS
   ===============================

  3.0 Implementação da biblioteca Lua para OpenSSL (Rodrigo)
    --> Está usando a nova versão da OpenSSL. Prazo estimado de duas (tres?)
        semanas para termos o binding para Lua
    --> FECHADO
    --> verificar status da versão 0.9.9.da OpenSSL (Rodrigo)

  3.1 Mecanismo de leasing (Cris)
      - definir o mecanismo
      - implementar o mecanismo de renovação para membro
      - implementar o mecanismo de renovação para serviço
    --> FECHADO

      - mecanismo para callback na falha de renovação (Cris)
        --> em Lua, dependendo de solução de bug do OiL (Renato Maia)

  3.2 Interceptação de Requisições (Ana)
      - mecanismo para inclusão da credencial na requisição 
         --> OK (lua/java)
      - obtenção e validação da credencial, com geração de exceção de sistema
         "NO PERMISSION" para credenciais invalidas, abortando o request
         --> OK (lua/java)

      - mecanismo de cache para credenciais válidas
         --> Para serviços básicos, não implementaremos ?

      - repasse da credencial para "Current" (thread de invocação do serviço)

        No caso do OiL é necessário adicionar um mecanismo para prover 
        funcionalidade semelhante ao PICurrent (salvamento de info associada ao
        contexto da corotina corrente) para serviços em Lua.
         --> OK

        Será necessário implementar mecanismo para Java (uso PICurrent) e C++
         --> Fechado para Java


  3.3 Mecanismo de log
      - equivalente ao "verbose" de Lua para Java (Rodrigo)
      - C++ ?

4) SERVIÇO DE ACESSO
   =================

  4.1 Mecanismo de persistência de credenciais (Rodrigo)
    --> FECHADO

  4.2 Incorporar o mecanismo de leasing
       -> dependência: 3.1
       -> FECHADO (Versão preliminar, sem adaptação)

  4.3 Login via Certificado:
      - mecanismo de cadastro de certificados (Rodrigo)
      - incorporar a biblioteca (Lua) do openSSL (Rodrigo)
        -> dependência: 1.2
      -> FECHADO

  4.4 Incorporar interceptador servidor (Ana)
      --> FECHADO 


5) SERVIÇO DE REGISTRO
   ===================

  5.1 Mecanismo de persistência de ofertas de serviço
      - persitência de ofertas semelhante à de credenciais (arquivo)
        --> pensar em como persistir as referências a Membros

      - preparar o repositório de ofertas para permitir o uso de um BD
        --> tarefa menos prioritaria, no momento

  5.2 Incorporar mecanismo de leasing (cliente) (Cris)
      --> FECHADO

  5.3 Incorporar interceptadores (Ana)
    --> FECHADO

  5.4 Autenticação via certificado
      -> dependência: 4.3
      --> FECHADO

  5.5 Transformar faceta RegistryService em interface do componente

6) SERVIÇO DE SESSÃO
   =================

  6.1 Mecanismo de troca de mensagens entre membros de sessão (Ana)
      --> Avaliar o serviço de eventos do SCS e sua interface

  6.2 Incorporar mecanismo de leasing (cliente/servidor)
      - manutenção de sessão + credencial
      -> dependências: 3.1 e 4.2

    --> Avaliar se será feito nessa etapa

  6.3 Incorporar interceptadores (Ana)
    --> FECHADO

  6.4 Autenticação via certificado (Rodrigo)
      -> dependência: 4.3
    --> FECHADO
     

7) SERVIÇO DE PROJETOS
   ===================

  7.1 Implementação do procedimento comum a todos os serviços
      - autenticação (+leasing credencial)
      - exportação do serviço
      - incorporação de interceptadores

      -> dependências: 4, 5, 3.2, 3.1
      --> FECHADO, extrair procedimento para biblioteca

  7.2 Implementação do serviço propriamente dito (JAVA/CSBASE)
      - Serviço de Dados
      - Serviço de Projetos

      -> dependência 7.1

  7.3 Serviço de Projetos (CSBASE)
      - Permitir a navegação pelos componentes de um projeto sem a
        necessidade de abrir este projeto. Deve ser possível também obter
        informações sobre estes componentes (tamanho, tipo, permissões, etc.).
      - Definir a forma de transferência dos dados de um arquivo.
        Como exportar os dados de forma estruturada?
        Devem ser criados canais específicos para cada tipo?

8) CLIENTES BÁSICOS (C++, Java, Lua)
   ================

  8.1 Procedimento comum a todos os clientes
      - autenticação
      - leasing
      - incorporação de interceptadores
      - importação de oferta de serviço

      -> dependências: 4, 5, 3.2, 3.1

  8.2 Teste de uso do serviço de projetos sem uso de sessão
      -> dependência: 8.1, 7

9) TESTES DE USO DE SESSÃO
   =======================
  9.1 Procedimento de criação/formação de sessão envolvendo múltiplos clientes
      -> dependências: 8 , 6

  9.2 Teste de uso do serviço de projetos com uso de sessão
      -> dependências: 9.1 e 7


9) CRIAÇÂO DE BIBLIOTECAS
   ======================

  9.1 Construir bibliotecas para clientes: C++, Java
     - procedimento comum a todos os clientes
     - acesso ao serviço de projetos

     -> dependências: 8
  
  9.2 Construir bibliotecas para serviços: Java, C++
      - procedimento comum a todos os serviços:
        ServerConnectionManager
        Exportação de serviços

     -> dependências: 7

10) TESTES GERAIS
  10.1 Testes de "stress" dos serviços
  10.2 Testes de falhas
