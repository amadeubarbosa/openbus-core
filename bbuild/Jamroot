# -*- coding: iso-8859-1-unix -*-

import os ;
import modules ;

path-constant here : . ;
path-constant root : $(here)/.. ;
path-constant deps : $(root)/.. ;

local lua = [ os.environ LUA ] ;
if ! $(lua)
{
  lua = "$(deps)/lua" ;
}
use-project lua : $(lua)/bbuild ; 

local lce = [ os.environ LCE ] ;
if ! $(lce)
{
  lce = "$(deps)/lce" ;
}
use-project lce : $(lce)/bbuild ;

local lualdap = [ os.environ LUALDAP ] ;
if ! $(lualdap)
{
  lualdap = "$(deps)/lualdap" ;
}
use-project lualdap : $(lualdap)/bbuild ;

local luuid = [ os.environ LUUID ] ;
if ! $(luuid)
{
  luuid = "$(deps)/luuid" ;
}
use-project luuid : $(luuid)/bbuild ;

local openssl-jam = [ os.environ OPENSSL_JAM_PATH ] ;
if ! $(openssl-jam)
{
  openssl-jam = "$(deps)/openssl.jam" ;
}
use-project openssl : $(openssl-jam) ; 

local lfs = [ os.environ LUAFILESYSTEM ] ;
if ! $(lfs)
{
  lfs = "$(deps)/luafilesystem" ;
}
use-project lfs : $(lfs)/bbuild ;

local luavararg = [ os.environ LUAVARARG ] ;
if ! $(luavararg)
{
  luavararg = "$(deps)/luavararg" ;
}
use-project luavararg : $(luavararg)/bbuild ;

local luastruct = [ os.environ LUASTRUCT ] ;
if ! $(luastruct)
{
  luastruct = "$(deps)/luastruct" ;
}
use-project luastruct : $(luastruct)/bbuild ;

local luasocket = [ os.environ LUASOCKET ] ;
if ! $(luasocket)
{
  luasocket = "$(deps)/luasocket" ;
}
use-project luasocket : $(luasocket)/bbuild ;

loop = [ os.environ LOOP ] ;
if ! $(loop)
{
  loop = "$(deps)/loop" ;
}
use-project loop : $(loop)/bbuild ;

oil = [ os.environ OIL ] ;
if ! $(oil)
{
  oil = "$(deps)/oil" ;
}
use-project oil : $(oil)/bbuild ;

local luascs = [ os.environ LUASCS ] ;
if ! $(luascs)
{
  luascs = "$(deps)/scs-lua" ;
}
use-project luascs : $(luascs)/bbuild ;

local luaopenbus = [ os.environ LUAOPENBUS ] ;
if ! $(luaopenbus)
{
  luaopenbus = "$(deps)/openbus-lua" ;
}
use-project luaopenbus : $(luaopenbus)/bbuild ;

local luasec = [ os.environ LUASEC ] ;
if ! $(luasec)
{
  luasec = "$(deps)/luasec" ;
}
use-project luasec : $(luasec)/bbuild ;

local openldap-jam = [ os.environ OPENLDAP_JAM ] ;
if ! $(openldap-jam)
{
  openldap-jam = "$(deps)/openldap.jam" ;
}
use-project openldap : $(openldap-jam) ; 

scs-idl = [ os.environ SCS_IDL ] ;
if ! $(scs-idl)
{
  scs-idl = "$(deps)/scs-idl" ;
}

openbus-idl = [ os.environ OPENBUS_IDL ] ;
if ! $(openbus-idl)
{
  openbus-idl = "$(deps)/openbus-idl" ;
}

openbus-legacy-idl-path = [ os.environ OPENBUS_LEGACY_IDL_PATH ] ;
if ! $(openbus-legacy-idl-path)
{
  openbus-legacy-idl-path = "$(deps)/openbus-legacy-idl" ;
}

openbus-lib-idl = [ os.environ OPENBUS_LIB_IDL ] ;
if ! $(openbus-lib-idl)
{
  openbus-lib-idl = "$(deps)/openbus-lib-idl" ;
}

modules.load preloader : : $(loop)/bbuild ;
import preloader ; 

using preloader : $(lua) ;

project busservices
  : requirements
    <target-os>windows:<pch>off
    <target-os>windows,<link>shared:<runtime-link>shared
    <target-os>windows,<link>static:<runtime-link>static
    <target-os>windows:<debug-store>database
    <target-os>windows:<define>_CRT_SECURE_NO_WARNINGS
    <target-os>windows:<define>_WIN32
    <define>OPENBUS_PROGNAME=\\\""busservices\\\""
    <toolset>msvc-12.0:<cxxflags>/FS
    <debug-symbols>on
    <link>static
  : default-build
    <variant>release
  ;

local core = $(root)/lua/openbus/core ;

make coreservices.c
  : $(core-path)/admin/idl.lua
    $(core-path)/admin/parsed.lua
    $(core-path)/legacy/ServiceWrappers.lua
    $(core-path)/services/Access.lua
    $(core-path)/services/AccessControl.lua
    $(core-path)/services/LoginDB.lua
    $(core-path)/services/main.lua
    $(core-path)/services/messages.lua
    $(core-path)/services/PasswordAttempts.lua
    $(core-path)/services/PropertyIndex.lua
    $(core-path)/services/OfferRegistry.lua
    $(core-path)/services/util.lua
    $(core-path)/services/passwordvalidator/LDAP.lua
  : preloader.pre-compile
  : <dependency>/lua//stage
    <search>$(root)
    <location>$(here)
  ;

make coreadmin.c
  : $(core-path)/admin/Description.lua
    $(core-path)/admin/idl.lua
    $(core-path)/admin/main.lua
    $(core-path)/admin/messages.lua
    $(core-path)/admin/parsed.lua
    $(core-path)/admin/script.lua
  : preloader.pre-compile
  : <dependency>/lua//stage
    <search>$(root)
    <location>$(here)
  ;

modules.load idl2lua : : $(oil)/bbuild ;
import idl2lua ; 
using idl2lua : $(lua) ;

make $(root)/lua/openbus/core/admin/parsed.lua 
  : $(root)/idl/access_management.idl
    $(root)/idl/offer_authorization.idl
    $(scs-idl-path)/src/scs.idl
    $(openbus-idl-path)/src/openbus_core-2.1.idl
    $(openbus-idl-path)/src/openbus_creden-2.1.idl
    $(openbus-idl-path)/src/openbus_access-2.1.idl
    $(openbus-idl-path)/src/openbus_offers-2.1.idl
  : idl2lua.compile
  : <include>$(openbus-idl-path)/src
    <include>$(openbus-legacy-idl-path)/src
    <include>$(scs-idl-path)/src
  ;

local exe_deps = 
  /lua//lua
  /luuid//luuid
  /lce//lce
  /luafilesystem//lfs
  /luavararg//luavararg
  /luastruct//luastruct
  /luasocket//luasocket
  /loop//loop
  /loop//luatuple
  /loop//luacothread
  /oil//oil
  /oil//luaidl
  /luascs//luascs
  /luaopenbus//luaopenbus
;

local exe_requirements =
  <dependency>/loop//loop
  <dependency>/loop//luatuple
  <dependency>/loop//luacothread
  <dependency>/oil//oil
  <dependency>/oil//luaidl
  <dependency>/lce//lce
  <dependency>/luascs//luascs
  <dependency>/luaopenbus//luaopenbus
  <target-os>linux:<library>unix//dl
  <target-os>linux:<library>unix//pthread
  <target-os>darwin:<library>/lualdap//lualdap
  <target-os>linux:<library>/lualdap//lualdap
  <include>$(root)src
  <include>$(here)
;

exe busservices
  : coreservices.c
    $(luaopenbus-root-path)/src/launcher.c
    $(root)/src/coreservlibs.c
    $(exe_deps)
  : $(exe_requirements)
    #Workaround to build with -j option.
    <dependency>coreservices.c 
  ;
explicit busservices ;

exe busadmin
  : $(luaopenbus-root-path)/src/launcher.c
    coreadmin.c
    $(root)/src/adminlibs.c
    $(exe_deps)
  : $(exe_requirements)
    #Workaround to build with -j option.
    <dependency>coreadmin.c
  ;
explicit busadmin ;
    
install deps
  : busservices
    busadmin
  : <location>install
    <install-dependencies>on
    <install-type>LIB
  ;
explicit deps ;

install stage
  : busservices
    busadmin
  : <location>install
  ;
